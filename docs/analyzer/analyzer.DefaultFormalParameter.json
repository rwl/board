{"name":"DefaultFormalParameter","qualifiedName":"analyzer/analyzer.DefaultFormalParameter","comment":"<p>Instances of the class <code>DefaultFormalParameter</code> represent a formal parameter with a default\nvalue. There are two kinds of parameters that are both represented by this class: named formal\nparameters and positional formal parameters.</p><pre>\ndefaultFormalParameter ::=\n    [NormalFormalParameter] ('=' [Expression])?\n<p>defaultNamedParameter ::=</p>\n<pre><code>[NormalFormalParameter] (':' [Expression])?\n</code></pre>\n<p>&lt;/pre></p>","isAbstract":false,"superclass":"analyzer/analyzer.FormalParameter","implements":[],"subclass":[],"variables":{"kind":{"name":"kind","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.kind","comment":"<p>The kind of this parameter.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/analyzer.ParameterKind","inner":[]}],"annotations":[]},"separator":{"name":"separator","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.separator","comment":"<p>The token separating the parameter from the default value, or <code>null</code> if there is no\ndefault value.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"defaultValue=":{"name":"defaultValue=","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.defaultValue=","comment":"<p>Set the expression computing the default value for the parameter to the given expression.</p>\n<p>@param expression the expression computing the default value for the parameter</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parameter=":{"name":"parameter=","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.parameter=","comment":"<p>Set the formal parameter with which the default value is associated to the given parameter.</p>\n<p>@param formalParameter the formal parameter with which the default value is associated</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"formalParameter":{"name":"formalParameter","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.NormalFormalParameter","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"analyzer.AstNode.beginToken","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"defaultValue":{"name":"defaultValue","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.defaultValue","comment":"<p>Return the expression computing the default value for the parameter, or <code>null</code> if there\nis no default value.</p>\n<p>@return the expression computing the default value for the parameter</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"analyzer.AstNode.endToken","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"identifier":{"name":"identifier","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.identifier","comment":"<p>Return the name of the parameter being declared.</p>\n<p>@return the name of the parameter being declared</p>","commentFrom":"analyzer.FormalParameter.identifier","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"isConst":{"name":"isConst","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.isConst","comment":"<p>Return <code>true</code> if this parameter was declared with the 'const' modifier.</p>\n<p>@return <code>true</code> if this parameter was declared with the 'const' modifier</p>","commentFrom":"analyzer.FormalParameter.isConst","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"isFinal":{"name":"isFinal","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.isFinal","comment":"<p>Return <code>true</code> if this parameter was declared with the 'final' modifier. Parameters that\nare declared with the 'const' modifier will return <code>false</code> even though they are\nimplicitly final.</p>\n<p>@return <code>true</code> if this parameter was declared with the 'final' modifier</p>","commentFrom":"analyzer.FormalParameter.isFinal","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"parameter":{"name":"parameter","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.parameter","comment":"<p>Return the formal parameter with which the default value is associated.</p>\n<p>@return the formal parameter with which the default value is associated</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.NormalFormalParameter","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.DefaultFormalParameter-","comment":"<p>Initialize a newly created default formal parameter.</p>\n<p>@param parameter the formal parameter with which the default value is associated\n@param kind the kind of this parameter\n@param separator the token separating the parameter from the default value\n@param defaultValue the expression computing the default value for the parameter</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"parameter":{"name":"parameter","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.NormalFormalParameter","inner":[]}],"value":null,"annotations":[]},"kind":{"name":"kind","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ParameterKind","inner":[]}],"value":null,"annotations":[]},"separator":{"name":"separator","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"defaultValue":{"name":"defaultValue","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"analyzer.AstNode.accept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.visitChildren","comment":"<p>Use the given visitor to visit all of the children of this node. The children will be visited\nin source order.</p>\n<p>@param visitor the visitor that will be used to visit the children of this node</p>","commentFrom":"analyzer.AstNode.visitChildren","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"inheritedMethods":{"setters":{"parent=":{"name":"parent=","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.parent=","comment":"<p>Set the parent of this node to the given node.</p>\n<p>@param newParent the node that is to be made the parent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newParent":{"name":"newParent","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.beginToken","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.element","comment":"<p>Return the element representing this parameter, or <code>null</code> if this parameter has not been\nresolved.</p>\n<p>@return the element representing this parameter</p>","commentFrom":"","inheritedFrom":"analyzer.FormalParameter.element","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ParameterElement","inner":[]}],"parameters":{},"annotations":[]},"end":{"name":"end","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.end","comment":"<p>Return the offset of the character immediately following the last character of this node's\nsource range. This is equivalent to <code>node.getOffset() + node.getLength()</code>. For a\ncompilation unit this will be equal to the length of the unit's source. For synthetic nodes\nthis will be equivalent to the node's offset (because the length is zero (0) by definition).</p>\n<p>@return the offset of the character just past the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.end","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.endToken","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.DefaultFormalParameter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"identifier":{"name":"identifier","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.identifier","comment":"<p>Return the name of the parameter being declared.</p>\n<p>@return the name of the parameter being declared</p>","commentFrom":"","inheritedFrom":"analyzer.FormalParameter.identifier","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"parameters":{},"annotations":[]},"isConst":{"name":"isConst","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.isConst","comment":"<p>Return <code>true</code> if this parameter was declared with the 'const' modifier.</p>\n<p>@return <code>true</code> if this parameter was declared with the 'const' modifier</p>","commentFrom":"","inheritedFrom":"analyzer.FormalParameter.isConst","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isFinal":{"name":"isFinal","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.isFinal","comment":"<p>Return <code>true</code> if this parameter was declared with the 'final' modifier. Parameters that\nare declared with the 'const' modifier will return <code>false</code> even though they are\nimplicitly final.</p>\n<p>@return <code>true</code> if this parameter was declared with the 'final' modifier</p>","commentFrom":"","inheritedFrom":"analyzer.FormalParameter.isFinal","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isSynthetic":{"name":"isSynthetic","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.isSynthetic","comment":"<p>Return <code>true</code> if this node is a synthetic node. A synthetic node is a node that was\nintroduced by the parser in order to recover from an error in the code. Synthetic nodes always\nhave a length of zero (<code>0</code>).</p>\n<p>@return <code>true</code> if this node is a synthetic node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.isSynthetic","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"kind":{"name":"kind","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.kind","comment":"<p>Return the kind of this parameter.</p>\n<p>@return the kind of this parameter</p>","commentFrom":"","inheritedFrom":"analyzer.FormalParameter.kind","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/analyzer.ParameterKind","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.length","comment":"<p>Return the number of characters in the node's source range.</p>\n<p>@return the number of characters in the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"offset":{"name":"offset","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.offset","comment":"<p>Return the offset from the beginning of the file to the first character in the node's source\nrange.</p>\n<p>@return the offset from the beginning of the file to the first character in the node's source</p>\n<pre><code>    range\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AstNode.offset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.parent","comment":"<p>Return this node's parent node, or <code>null</code> if this node is the root of an AST structure.</p>\n<p>Note that the relationship between an AST node and its parent node may change over the lifetime\nof a node.</p>\n<p>@return the parent of this node, or <code>null</code> if none</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.root","comment":"<p>Return the node at the root of this node's AST structure. Note that this method's performance\nis linear with respect to the depth of the node in the AST structure (O(depth)).</p>\n<p>@return the node at the root of this node's AST structure</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.root","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.DefaultFormalParameter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.DefaultFormalParameter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.accept","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"becomeParentOf":{"name":"becomeParentOf","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.becomeParentOf","comment":"<p>Make this node the parent of the given child node.</p>\n<p>@param child the node that will become a child of this node\n@return the node that was made a child of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.becomeParentOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAncestor":{"name":"getAncestor","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.getAncestor","comment":"<p>Return the node of the given class that most immediately encloses this node, or <code>null</code> if\nthere is no enclosing node of the given class.</p>\n<p>@param nodeClass the class of the node to be returned\n@return the node of the given type that encloses this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getAncestor","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/java-engine.Predicate","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getProperty":{"name":"getProperty","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.getProperty","comment":"<p>Return the value of the property with the given name, or <code>null</code> if this node does not\nhave a property with the given name.</p>\n<p>@return the value of the property with the given name</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.noSuchMethod","comment":"<p><a>analyzer/analyzer.DefaultFormalParameter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.DefaultFormalParameter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.DefaultFormalParameter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.DefaultFormalParameter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"safelyVisitChild":{"name":"safelyVisitChild","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.safelyVisitChild","comment":"<p>If the given child is not <code>null</code>, use the given visitor to visit it.</p>\n<p>@param child the child to be visited\n@param visitor the visitor that will be used to visit the child</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.safelyVisitChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setProperty":{"name":"setProperty","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.setProperty","comment":"<p>Set the value of the property with the given name to the given value. If the value is\n<code>null</code>, the property will effectively be removed.</p>\n<p>@param propertyName the name of the property whose value is to be set\n@param propertyValue the new value of the property</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.setProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"propertyValue":{"name":"propertyValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSource":{"name":"toSource","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.toSource","comment":"<p>Return a textual description of this node in a form approximating valid source. The returned\nstring will not be valid source primarily in the case where the node itself is not well-formed.</p>\n<p>@return the source code equivalent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.toSource","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"analyzer.AstNode.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.DefaultFormalParameter.visitChildren","comment":"<p>Use the given visitor to visit all of the children of this node. The children will be visited\nin source order.</p>\n<p>@param visitor the visitor that will be used to visit the children of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.visitChildren","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}