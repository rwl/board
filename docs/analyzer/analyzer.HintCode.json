{"name":"HintCode","qualifiedName":"analyzer/analyzer.HintCode","comment":"<p>The enumeration <code>HintCode</code> defines the hints and coding recommendations for best practices\nwhich are not mentioned in the Dart Language Specification.</p>","isAbstract":false,"superclass":"analyzer/analyzer.Enum","implements":["analyzer/analyzer.ErrorCode"],"subclass":[],"variables":{"ARGUMENT_TYPE_NOT_ASSIGNABLE":{"name":"ARGUMENT_TYPE_NOT_ASSIGNABLE","qualifiedName":"analyzer/analyzer.HintCode.ARGUMENT_TYPE_NOT_ASSIGNABLE","comment":"<p>This hint is generated anywhere where the\n[StaticWarningCode#ARGUMENT_TYPE_NOT_ASSIGNABLE] would have been generated, if we used\npropagated information for the warnings.</p>\n<p>@param actualType the name of the actual argument type\n@param expectedType the name of the expected type\n@see StaticWarningCode#ARGUMENT<em>TYPE</em>NOT_ASSIGNABLE</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"DEAD_CODE":{"name":"DEAD_CODE","qualifiedName":"analyzer/analyzer.HintCode.DEAD_CODE","comment":"<p>Dead code is code that is never reached, this can happen for instance if a statement follows a\nreturn statement.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"DEAD_CODE_CATCH_FOLLOWING_CATCH":{"name":"DEAD_CODE_CATCH_FOLLOWING_CATCH","qualifiedName":"analyzer/analyzer.HintCode.DEAD_CODE_CATCH_FOLLOWING_CATCH","comment":"<p>Dead code is code that is never reached. This case covers cases where the user has catch\nclauses after <code>catch (e)</code> or <code>on Object catch (e)</code>.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"DEAD_CODE_ON_CATCH_SUBTYPE":{"name":"DEAD_CODE_ON_CATCH_SUBTYPE","qualifiedName":"analyzer/analyzer.HintCode.DEAD_CODE_ON_CATCH_SUBTYPE","comment":"<p>Dead code is code that is never reached. This case covers cases where the user has an on-catch\nclause such as <code>on A catch (e)</code>, where a supertype of <code>A</code> was already caught.</p>\n<p>@param subtypeName name of the subtype\n@param supertypeName name of the supertype</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"DEPRECATED_MEMBER_USE":{"name":"DEPRECATED_MEMBER_USE","qualifiedName":"analyzer/analyzer.HintCode.DEPRECATED_MEMBER_USE","comment":"<p>Deprecated members should not be invoked or used.</p>\n<p>@param memberName the name of the member</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"DIVISION_OPTIMIZATION":{"name":"DIVISION_OPTIMIZATION","qualifiedName":"analyzer/analyzer.HintCode.DIVISION_OPTIMIZATION","comment":"<p>Hint to use the ~/ operator.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"DUPLICATE_IMPORT":{"name":"DUPLICATE_IMPORT","qualifiedName":"analyzer/analyzer.HintCode.DUPLICATE_IMPORT","comment":"<p>Duplicate imports.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"INVALID_ASSIGNMENT":{"name":"INVALID_ASSIGNMENT","qualifiedName":"analyzer/analyzer.HintCode.INVALID_ASSIGNMENT","comment":"<p>This hint is generated anywhere where the StaticTypeWarningCode#INVALID_ASSIGNMENT\nwould have been generated, if we used propagated information for the warnings.</p>\n<p>@param rhsTypeName the name of the right hand side type\n@param lhsTypeName the name of the left hand side type\n@see StaticTypeWarningCode#INVALID_ASSIGNMENT</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"IS_DOUBLE":{"name":"IS_DOUBLE","qualifiedName":"analyzer/analyzer.HintCode.IS_DOUBLE","comment":"<p>Hint for the <code>x is double</code> type checks.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"IS_INT":{"name":"IS_INT","qualifiedName":"analyzer/analyzer.HintCode.IS_INT","comment":"<p>Hint for the <code>x is int</code> type checks.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"IS_NOT_DOUBLE":{"name":"IS_NOT_DOUBLE","qualifiedName":"analyzer/analyzer.HintCode.IS_NOT_DOUBLE","comment":"<p>Hint for the <code>x is! double</code> type checks.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"IS_NOT_INT":{"name":"IS_NOT_INT","qualifiedName":"analyzer/analyzer.HintCode.IS_NOT_INT","comment":"<p>Hint for the <code>x is! int</code> type checks.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"MISSING_RETURN":{"name":"MISSING_RETURN","qualifiedName":"analyzer/analyzer.HintCode.MISSING_RETURN","comment":"<p>Generate a hint for methods or functions that have a return type, but do not have a non-void\nreturn statement on all branches. At the end of methods or functions with no return, Dart\nimplicitly returns <code>null</code>, avoiding these implicit returns is considered a best practice.</p>\n<p>@param returnType the name of the declared return type</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"OVERRIDE_EQUALS_BUT_NOT_HASH_CODE":{"name":"OVERRIDE_EQUALS_BUT_NOT_HASH_CODE","qualifiedName":"analyzer/analyzer.HintCode.OVERRIDE_EQUALS_BUT_NOT_HASH_CODE","comment":"<p>Hint for classes that override equals, but not hashCode.</p>\n<p>@param className the name of the current class</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"OVERRIDE_ON_NON_OVERRIDING_GETTER":{"name":"OVERRIDE_ON_NON_OVERRIDING_GETTER","qualifiedName":"analyzer/analyzer.HintCode.OVERRIDE_ON_NON_OVERRIDING_GETTER","comment":"<p>A getter with the override annotation does not override an existing getter.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"OVERRIDE_ON_NON_OVERRIDING_METHOD":{"name":"OVERRIDE_ON_NON_OVERRIDING_METHOD","qualifiedName":"analyzer/analyzer.HintCode.OVERRIDE_ON_NON_OVERRIDING_METHOD","comment":"<p>A method with the override annotation does not override an existing method.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"OVERRIDE_ON_NON_OVERRIDING_SETTER":{"name":"OVERRIDE_ON_NON_OVERRIDING_SETTER","qualifiedName":"analyzer/analyzer.HintCode.OVERRIDE_ON_NON_OVERRIDING_SETTER","comment":"<p>A setter with the override annotation does not override an existing setter.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"TYPE_CHECK_IS_NOT_NULL":{"name":"TYPE_CHECK_IS_NOT_NULL","qualifiedName":"analyzer/analyzer.HintCode.TYPE_CHECK_IS_NOT_NULL","comment":"<p>Type checks of the type <code>x is! Null</code> should be done with <code>x != null</code>.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"TYPE_CHECK_IS_NULL":{"name":"TYPE_CHECK_IS_NULL","qualifiedName":"analyzer/analyzer.HintCode.TYPE_CHECK_IS_NULL","comment":"<p>Type checks of the type <code>x is Null</code> should be done with <code>x == null</code>.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNDEFINED_GETTER":{"name":"UNDEFINED_GETTER","qualifiedName":"analyzer/analyzer.HintCode.UNDEFINED_GETTER","comment":"<p>This hint is generated anywhere where the StaticTypeWarningCode#UNDEFINED_GETTER or\nStaticWarningCode#UNDEFINED_GETTER would have been generated, if we used propagated\ninformation for the warnings.</p>\n<p>@param getterName the name of the getter\n@param enclosingType the name of the enclosing type where the getter is being looked for\n@see StaticTypeWarningCode#UNDEFINED<em>GETTER\n@see StaticWarningCode#UNDEFINED</em>GETTER</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNDEFINED_METHOD":{"name":"UNDEFINED_METHOD","qualifiedName":"analyzer/analyzer.HintCode.UNDEFINED_METHOD","comment":"<p>This hint is generated anywhere where the StaticTypeWarningCode#UNDEFINED_METHOD would\nhave been generated, if we used propagated information for the warnings.</p>\n<p>@param methodName the name of the method that is undefined\n@param typeName the resolved type name that the method lookup is happening on\n@see StaticTypeWarningCode#UNDEFINED_METHOD</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNDEFINED_OPERATOR":{"name":"UNDEFINED_OPERATOR","qualifiedName":"analyzer/analyzer.HintCode.UNDEFINED_OPERATOR","comment":"<p>This hint is generated anywhere where the StaticTypeWarningCode#UNDEFINED_OPERATOR\nwould have been generated, if we used propagated information for the warnings.</p>\n<p>@param operator the name of the operator\n@param enclosingType the name of the enclosing type where the operator is being looked for\n@see StaticTypeWarningCode#UNDEFINED_OPERATOR</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNDEFINED_SETTER":{"name":"UNDEFINED_SETTER","qualifiedName":"analyzer/analyzer.HintCode.UNDEFINED_SETTER","comment":"<p>This hint is generated anywhere where the StaticTypeWarningCode#UNDEFINED_SETTER or\nStaticWarningCode#UNDEFINED_SETTER would have been generated, if we used propagated\ninformation for the warnings.</p>\n<p>@param setterName the name of the setter\n@param enclosingType the name of the enclosing type where the setter is being looked for\n@see StaticTypeWarningCode#UNDEFINED<em>SETTER\n@see StaticWarningCode#UNDEFINED</em>SETTER</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNNECESSARY_CAST":{"name":"UNNECESSARY_CAST","qualifiedName":"analyzer/analyzer.HintCode.UNNECESSARY_CAST","comment":"<p>Unnecessary cast.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNNECESSARY_TYPE_CHECK_FALSE":{"name":"UNNECESSARY_TYPE_CHECK_FALSE","qualifiedName":"analyzer/analyzer.HintCode.UNNECESSARY_TYPE_CHECK_FALSE","comment":"<p>Unnecessary type checks, the result is always true.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNNECESSARY_TYPE_CHECK_TRUE":{"name":"UNNECESSARY_TYPE_CHECK_TRUE","qualifiedName":"analyzer/analyzer.HintCode.UNNECESSARY_TYPE_CHECK_TRUE","comment":"<p>Unnecessary type checks, the result is always false.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"UNUSED_IMPORT":{"name":"UNUSED_IMPORT","qualifiedName":"analyzer/analyzer.HintCode.UNUSED_IMPORT","comment":"<p>Unused imports are imports which are never not used.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"USE_OF_VOID_RESULT":{"name":"USE_OF_VOID_RESULT","qualifiedName":"analyzer/analyzer.HintCode.USE_OF_VOID_RESULT","comment":"<p>Hint for cases where the source expects a method or function to return a non-void result, but\nthe method or function signature returns void.</p>\n<p>@param name the name of the method or function that returns void</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HintCode","inner":[]}],"annotations":[]},"correction":{"name":"correction","qualifiedName":"analyzer/analyzer.HintCode.correction","comment":"<p>The template used to create the correction to be displayed for this error, or <code>null</code> if\nthere is no correction information for this error.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"message":{"name":"message","qualifiedName":"analyzer/analyzer.HintCode.message","comment":"<p>The template used to create the message to be displayed for this error.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"values":{"name":"values","qualifiedName":"analyzer/analyzer.HintCode.values","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.HintCode","inner":[]}]}],"annotations":[]}},"inheritedVariables":{"name":{"name":"name","qualifiedName":"analyzer/analyzer.Enum.name","comment":"<p>The name of this enum constant, as declared in the enum declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"ordinal":{"name":"ordinal","qualifiedName":"analyzer/analyzer.Enum.ordinal","comment":"<p>The position in the enum declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"errorSeverity":{"name":"errorSeverity","qualifiedName":"analyzer/analyzer.HintCode.errorSeverity","comment":"<p>Return the severity of this error.</p>\n<p>@return the severity of this error</p>","commentFrom":"analyzer.ErrorCode.errorSeverity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorSeverity","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"type":{"name":"type","qualifiedName":"analyzer/analyzer.HintCode.type","comment":"<p>Return the type of the error.</p>\n<p>@return the type of the error</p>","commentFrom":"analyzer.ErrorCode.type","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorType","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}},"constructors":{"con1":{"name":"con1","qualifiedName":"analyzer/analyzer.HintCode.HintCode-con1","comment":"<p>Initialize a newly created error code to have the given message.</p>\n<p>@param message the message template used to create the message to be displayed for the error</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"ordinal":{"name":"ordinal","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"con2":{"name":"con2","qualifiedName":"analyzer/analyzer.HintCode.HintCode-con2","comment":"<p>Initialize a newly created error code to have the given message and correction.</p>\n<p>@param message the template used to create the message to be displayed for the error\n@param correction the template used to create the correction to be displayed for the error</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"ordinal":{"name":"ordinal","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"correction":{"name":"correction","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"correction":{"name":"correction","qualifiedName":"analyzer/analyzer.HintCode.correction","comment":"<p>Return the template used to create the correction to be displayed for this error, or\n<code>null</code> if there is no correction information for this error. The correction should\nindicate how the user can fix the error.</p>\n<p>@return the template used to create the correction to be displayed for this error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.correction","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"errorSeverity":{"name":"errorSeverity","qualifiedName":"analyzer/analyzer.HintCode.errorSeverity","comment":"<p>Return the severity of this error.</p>\n<p>@return the severity of this error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.errorSeverity","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorSeverity","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.HintCode.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.HintCode.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"message":{"name":"message","qualifiedName":"analyzer/analyzer.HintCode.message","comment":"<p>Return the template used to create the message to be displayed for this error. The message\nshould indicate what is wrong and why it is wrong.</p>\n<p>@return the template used to create the message to be displayed for this error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.message","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.HintCode.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"analyzer/analyzer.HintCode.type","comment":"<p>Return the type of the error.</p>\n<p>@return the type of the error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.type","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorType","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.HintCode.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.HintCode.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.HintCode.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"analyzer/analyzer.HintCode.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>analyzer/analyzer.HintCode.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>analyzer/analyzer.HintCode.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>analyzer/analyzer.HintCode.compareTo.other</a>,\nand zero if <code>this</code> and <a>analyzer/analyzer.HintCode.compareTo.other</a> are ordered together.</p>\n<p>The <a>analyzer/analyzer.HintCode.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"dart-core.Comparable.compareTo","inheritedFrom":"analyzer.Enum.compareTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Enum.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.HintCode.noSuchMethod","comment":"<p><a>analyzer/analyzer.HintCode.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.HintCode.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.HintCode.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.HintCode.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.HintCode.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}