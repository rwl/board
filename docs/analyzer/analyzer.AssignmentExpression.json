{"name":"AssignmentExpression","qualifiedName":"analyzer/analyzer.AssignmentExpression","comment":"<p>Instances of the class <code>AssignmentExpression</code> represent an assignment expression.</p><pre>\nassignmentExpression ::=\n    [Expression] [Token] [Expression]\n</pre>","isAbstract":false,"superclass":"analyzer/analyzer.Expression","implements":[],"subclass":[],"variables":{"operator":{"name":"operator","qualifiedName":"analyzer/analyzer.AssignmentExpression.operator","comment":"<p>The assignment operator being applied.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]}},"inheritedVariables":{"propagatedType":{"name":"propagatedType","qualifiedName":"analyzer/analyzer.Expression.propagatedType","comment":"<p>The propagated type of this expression, or <code>null</code> if type propagation has not been\nperformed on the AST structure.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-element.DartType","inner":[]}],"annotations":[]},"staticType":{"name":"staticType","qualifiedName":"analyzer/analyzer.Expression.staticType","comment":"<p>The static type of this expression, or <code>null</code> if the AST structure has not been resolved.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-element.DartType","inner":[]}],"annotations":[]}},"methods":{"setters":{"leftHandSide=":{"name":"leftHandSide=","qualifiedName":"analyzer/analyzer.AssignmentExpression.leftHandSide=","comment":"<p>Return the expression used to compute the left hand side.</p>\n<p>@param expression the expression used to compute the left hand side</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"propagatedElement=":{"name":"propagatedElement=","qualifiedName":"analyzer/analyzer.AssignmentExpression.propagatedElement=","comment":"<p>Set the element associated with the operator based on the propagated type of the left-hand-side\nto the given element.</p>\n<p>@param element the element to be associated with the operator</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-element.MethodElement","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"rightHandSide=":{"name":"rightHandSide=","qualifiedName":"analyzer/analyzer.AssignmentExpression.rightHandSide=","comment":"<p>Set the expression used to compute the left hand side to the given expression.</p>\n<p>@param expression the expression used to compute the left hand side</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"staticElement=":{"name":"staticElement=","qualifiedName":"analyzer/analyzer.AssignmentExpression.staticElement=","comment":"<p>Set the element associated with the operator based on the static type of the left-hand-side to\nthe given element.</p>\n<p>@param element the static element to be associated with the operator</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-element.MethodElement","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.AssignmentExpression.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"analyzer.AstNode.beginToken","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"bestElement":{"name":"bestElement","qualifiedName":"analyzer/analyzer.AssignmentExpression.bestElement","comment":"<p>Return the best element available for this operator. If resolution was able to find a better\nelement based on type propagation, that element will be returned. Otherwise, the element found\nusing the result of static analysis will be returned. If resolution has not been performed,\nthen <code>null</code> will be returned.</p>\n<p>@return the best element available for this operator</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.MethodElement","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.AssignmentExpression.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"analyzer.AstNode.endToken","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"leftHandSide":{"name":"leftHandSide","qualifiedName":"analyzer/analyzer.AssignmentExpression.leftHandSide","comment":"<p>Set the expression used to compute the left hand side to the given expression.</p>\n<p>@return the expression used to compute the left hand side</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"parameters":{},"annotations":[]},"precedence":{"name":"precedence","qualifiedName":"analyzer/analyzer.AssignmentExpression.precedence","comment":"<p>Return the precedence of this expression. The precedence is a positive integer value that\ndefines how the source code is parsed into an AST. For example <code>a * b + c</code> is parsed as\n<code>(a * b) + c</code> because the precedence of <code>*</code> is greater than the precedence of\n<code>+</code>.</p>\n<p>You should not assume that returned values will stay the same, they might change as result of\nspecification change. Only relative order should be used.</p>\n<p>@return the precedence of this expression</p>","commentFrom":"analyzer.Expression.precedence","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"propagatedElement":{"name":"propagatedElement","qualifiedName":"analyzer/analyzer.AssignmentExpression.propagatedElement","comment":"<p>Return the element associated with the operator based on the propagated type of the\nleft-hand-side, or <code>null</code> if the AST structure has not been resolved, if the operator is\nnot a compound operator, or if the operator could not be resolved. One example of the latter\ncase is an operator that is not defined for the type of the left-hand operand.</p>\n<p>@return the element associated with the operator</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.MethodElement","inner":[]}],"parameters":{},"annotations":[]},"propagatedParameterElementForRightHandSide":{"name":"propagatedParameterElementForRightHandSide","qualifiedName":"analyzer/analyzer.AssignmentExpression.propagatedParameterElementForRightHandSide","comment":"<p>If the AST structure has been resolved, and the function being invoked is known based on\npropagated type information, then return the parameter element representing the parameter to\nwhich the value of the right operand will be bound. Otherwise, return <code>null</code>.</p>\n<p>This method is only intended to be used by Expression#getPropagatedParameterElement.</p>\n<p>@return the parameter element representing the parameter to which the value of the right</p>\n<pre><code>    operand will be bound\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ParameterElement","inner":[]}],"parameters":{},"annotations":[]},"rightHandSide":{"name":"rightHandSide","qualifiedName":"analyzer/analyzer.AssignmentExpression.rightHandSide","comment":"<p>Return the expression used to compute the right hand side.</p>\n<p>@return the expression used to compute the right hand side</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"parameters":{},"annotations":[]},"staticElement":{"name":"staticElement","qualifiedName":"analyzer/analyzer.AssignmentExpression.staticElement","comment":"<p>Return the element associated with the operator based on the static type of the left-hand-side,\nor <code>null</code> if the AST structure has not been resolved, if the operator is not a compound\noperator, or if the operator could not be resolved. One example of the latter case is an\noperator that is not defined for the type of the left-hand operand.</p>\n<p>@return the element associated with the operator</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.MethodElement","inner":[]}],"parameters":{},"annotations":[]},"staticParameterElementForRightHandSide":{"name":"staticParameterElementForRightHandSide","qualifiedName":"analyzer/analyzer.AssignmentExpression.staticParameterElementForRightHandSide","comment":"<p>If the AST structure has been resolved, and the function being invoked is known based on static\ntype information, then return the parameter element representing the parameter to which the\nvalue of the right operand will be bound. Otherwise, return <code>null</code>.</p>\n<p>This method is only intended to be used by Expression#getStaticParameterElement.</p>\n<p>@return the parameter element representing the parameter to which the value of the right</p>\n<pre><code>    operand will be bound\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ParameterElement","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"analyzer/analyzer.AssignmentExpression.AssignmentExpression-","comment":"<p>Initialize a newly created assignment expression.</p>\n<p>@param leftHandSide the expression used to compute the left hand side\n@param operator the assignment operator being applied\n@param rightHandSide the expression used to compute the right hand side</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"leftHandSide":{"name":"leftHandSide","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"value":null,"annotations":[]},"operator":{"name":"operator","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"rightHandSide":{"name":"rightHandSide","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.AssignmentExpression.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"analyzer.AstNode.accept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.AssignmentExpression.visitChildren","comment":"<p>Use the given visitor to visit all of the children of this node. The children will be visited\nin source order.</p>\n<p>@param visitor the visitor that will be used to visit the children of this node</p>","commentFrom":"analyzer.AstNode.visitChildren","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"inheritedMethods":{"setters":{"parent=":{"name":"parent=","qualifiedName":"analyzer/analyzer.AssignmentExpression.parent=","comment":"<p>Set the parent of this node to the given node.</p>\n<p>@param newParent the node that is to be made the parent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newParent":{"name":"newParent","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.AssignmentExpression.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.beginToken","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"bestParameterElement":{"name":"bestParameterElement","qualifiedName":"analyzer/analyzer.AssignmentExpression.bestParameterElement","comment":"<p>Return the best parameter element information available for this expression. If type\npropagation was able to find a better parameter element than static analysis, that type will be\nreturned. Otherwise, the result of static analysis will be returned.</p>\n<p>@return the parameter element representing the parameter to which the value of this expression</p>\n<pre><code>    will be bound\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.Expression.bestParameterElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ParameterElement","inner":[]}],"parameters":{},"annotations":[]},"bestType":{"name":"bestType","qualifiedName":"analyzer/analyzer.AssignmentExpression.bestType","comment":"<p>Return the best type information available for this expression. If type propagation was able to\nfind a better type than static analysis, that type will be returned. Otherwise, the result of\nstatic analysis will be returned. If no type analysis has been performed, then the type\n'dynamic' will be returned.</p>\n<p>@return the best type information available for this expression</p>","commentFrom":"","inheritedFrom":"analyzer.Expression.bestType","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.DartType","inner":[]}],"parameters":{},"annotations":[]},"end":{"name":"end","qualifiedName":"analyzer/analyzer.AssignmentExpression.end","comment":"<p>Return the offset of the character immediately following the last character of this node's\nsource range. This is equivalent to <code>node.getOffset() + node.getLength()</code>. For a\ncompilation unit this will be equal to the length of the unit's source. For synthetic nodes\nthis will be equivalent to the node's offset (because the length is zero (0) by definition).</p>\n<p>@return the offset of the character just past the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.end","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.AssignmentExpression.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.endToken","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.AssignmentExpression.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.AssignmentExpression.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isAssignable":{"name":"isAssignable","qualifiedName":"analyzer/analyzer.AssignmentExpression.isAssignable","comment":"<p>Return <code>true</code> if this expression is syntactically valid for the LHS of an\n<a>analyzer/analyzer.AssignmentExpression</a>.</p>\n<p>@return <code>true</code> if this expression matches the <code>assignableExpression</code> production</p>","commentFrom":"","inheritedFrom":"analyzer.Expression.isAssignable","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isSynthetic":{"name":"isSynthetic","qualifiedName":"analyzer/analyzer.AssignmentExpression.isSynthetic","comment":"<p>Return <code>true</code> if this node is a synthetic node. A synthetic node is a node that was\nintroduced by the parser in order to recover from an error in the code. Synthetic nodes always\nhave a length of zero (<code>0</code>).</p>\n<p>@return <code>true</code> if this node is a synthetic node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.isSynthetic","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"analyzer/analyzer.AssignmentExpression.length","comment":"<p>Return the number of characters in the node's source range.</p>\n<p>@return the number of characters in the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"offset":{"name":"offset","qualifiedName":"analyzer/analyzer.AssignmentExpression.offset","comment":"<p>Return the offset from the beginning of the file to the first character in the node's source\nrange.</p>\n<p>@return the offset from the beginning of the file to the first character in the node's source</p>\n<pre><code>    range\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AstNode.offset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"analyzer/analyzer.AssignmentExpression.parent","comment":"<p>Return this node's parent node, or <code>null</code> if this node is the root of an AST structure.</p>\n<p>Note that the relationship between an AST node and its parent node may change over the lifetime\nof a node.</p>\n<p>@return the parent of this node, or <code>null</code> if none</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"precedence":{"name":"precedence","qualifiedName":"analyzer/analyzer.AssignmentExpression.precedence","comment":"<p>Return the precedence of this expression. The precedence is a positive integer value that\ndefines how the source code is parsed into an AST. For example <code>a * b + c</code> is parsed as\n<code>(a * b) + c</code> because the precedence of <code>*</code> is greater than the precedence of\n<code>+</code>.</p>\n<p>You should not assume that returned values will stay the same, they might change as result of\nspecification change. Only relative order should be used.</p>\n<p>@return the precedence of this expression</p>","commentFrom":"","inheritedFrom":"analyzer.Expression.precedence","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"propagatedParameterElement":{"name":"propagatedParameterElement","qualifiedName":"analyzer/analyzer.AssignmentExpression.propagatedParameterElement","comment":"<p>If this expression is an argument to an invocation, and the AST structure has been resolved,\nand the function being invoked is known based on propagated type information, and this\nexpression corresponds to one of the parameters of the function being invoked, then return the\nparameter element representing the parameter to which the value of this expression will be\nbound. Otherwise, return <code>null</code>.</p>\n<p>@return the parameter element representing the parameter to which the value of this expression</p>\n<pre><code>    will be bound\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.Expression.propagatedParameterElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ParameterElement","inner":[]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"analyzer/analyzer.AssignmentExpression.root","comment":"<p>Return the node at the root of this node's AST structure. Note that this method's performance\nis linear with respect to the depth of the node in the AST structure (O(depth)).</p>\n<p>@return the node at the root of this node's AST structure</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.root","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.AssignmentExpression.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"staticParameterElement":{"name":"staticParameterElement","qualifiedName":"analyzer/analyzer.AssignmentExpression.staticParameterElement","comment":"<p>If this expression is an argument to an invocation, and the AST structure has been resolved,\nand the function being invoked is known based on static type information, and this expression\ncorresponds to one of the parameters of the function being invoked, then return the parameter\nelement representing the parameter to which the value of this expression will be bound.\nOtherwise, return <code>null</code>.</p>\n<p>@return the parameter element representing the parameter to which the value of this expression</p>\n<pre><code>    will be bound\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.Expression.staticParameterElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ParameterElement","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.AssignmentExpression.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.AssignmentExpression.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.AssignmentExpression.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.AssignmentExpression.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.accept","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"becomeParentOf":{"name":"becomeParentOf","qualifiedName":"analyzer/analyzer.AssignmentExpression.becomeParentOf","comment":"<p>Make this node the parent of the given child node.</p>\n<p>@param child the node that will become a child of this node\n@return the node that was made a child of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.becomeParentOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAncestor":{"name":"getAncestor","qualifiedName":"analyzer/analyzer.AssignmentExpression.getAncestor","comment":"<p>Return the node of the given class that most immediately encloses this node, or <code>null</code> if\nthere is no enclosing node of the given class.</p>\n<p>@param nodeClass the class of the node to be returned\n@return the node of the given type that encloses this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getAncestor","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/java-engine.Predicate","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getProperty":{"name":"getProperty","qualifiedName":"analyzer/analyzer.AssignmentExpression.getProperty","comment":"<p>Return the value of the property with the given name, or <code>null</code> if this node does not\nhave a property with the given name.</p>\n<p>@return the value of the property with the given name</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.AssignmentExpression.noSuchMethod","comment":"<p><a>analyzer/analyzer.AssignmentExpression.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.AssignmentExpression.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.AssignmentExpression.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.AssignmentExpression.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"safelyVisitChild":{"name":"safelyVisitChild","qualifiedName":"analyzer/analyzer.AssignmentExpression.safelyVisitChild","comment":"<p>If the given child is not <code>null</code>, use the given visitor to visit it.</p>\n<p>@param child the child to be visited\n@param visitor the visitor that will be used to visit the child</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.safelyVisitChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setProperty":{"name":"setProperty","qualifiedName":"analyzer/analyzer.AssignmentExpression.setProperty","comment":"<p>Set the value of the property with the given name to the given value. If the value is\n<code>null</code>, the property will effectively be removed.</p>\n<p>@param propertyName the name of the property whose value is to be set\n@param propertyValue the new value of the property</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.setProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"propertyValue":{"name":"propertyValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSource":{"name":"toSource","qualifiedName":"analyzer/analyzer.AssignmentExpression.toSource","comment":"<p>Return a textual description of this node in a form approximating valid source. The returned\nstring will not be valid source primarily in the case where the node itself is not well-formed.</p>\n<p>@return the source code equivalent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.toSource","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.AssignmentExpression.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"analyzer.AstNode.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.AssignmentExpression.visitChildren","comment":"<p>Use the given visitor to visit all of the children of this node. The children will be visited\nin source order.</p>\n<p>@param visitor the visitor that will be used to visit the children of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.visitChildren","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}