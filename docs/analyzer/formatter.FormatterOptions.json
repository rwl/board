{"name":"FormatterOptions","qualifiedName":"analyzer/formatter.FormatterOptions","comment":"<p>Formatter options.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"codeTransforms":{"name":"codeTransforms","qualifiedName":"analyzer/formatter.FormatterOptions.codeTransforms","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"initialIndentationLevel":{"name":"initialIndentationLevel","qualifiedName":"analyzer/formatter.FormatterOptions.initialIndentationLevel","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"lineSeparator":{"name":"lineSeparator","qualifiedName":"analyzer/formatter.FormatterOptions.lineSeparator","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"pageWidth":{"name":"pageWidth","qualifiedName":"analyzer/formatter.FormatterOptions.pageWidth","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"spacesPerIndent":{"name":"spacesPerIndent","qualifiedName":"analyzer/formatter.FormatterOptions.spacesPerIndent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"tabSize":{"name":"tabSize","qualifiedName":"analyzer/formatter.FormatterOptions.tabSize","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"tabsForIndent":{"name":"tabsForIndent","qualifiedName":"analyzer/formatter.FormatterOptions.tabsForIndent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"analyzer/formatter.FormatterOptions.FormatterOptions-","comment":"<p>Create formatter options with defaults derived (where defined) from\nthe style guide: <a href=\"http://www.dartlang.org/articles/style-guide/\">http://www.dartlang.org/articles/style-guide/</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialIndentationLevel":{"name":"initialIndentationLevel","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"spacesPerIndent":{"name":"spacesPerIndent","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"2","annotations":[]},"lineSeparator":{"name":"lineSeparator","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\n\"","annotations":[]},"pageWidth":{"name":"pageWidth","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"80","annotations":[]},"tabsForIndent":{"name":"tabsForIndent","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"tabSize":{"name":"tabSize","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"2","annotations":[]},"codeTransforms":{"name":"codeTransforms","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"analyzer/formatter.FormatterOptions.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/formatter.FormatterOptions.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/formatter.FormatterOptions.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/formatter.FormatterOptions.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/formatter.FormatterOptions.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/formatter.FormatterOptions.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/formatter.FormatterOptions.noSuchMethod","comment":"<p><a>analyzer/formatter.FormatterOptions.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/formatter.FormatterOptions.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/formatter.FormatterOptions.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/formatter.FormatterOptions.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/formatter.FormatterOptions.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}