{"name":"HtmlWarningCode","qualifiedName":"analyzer/analyzer.HtmlWarningCode","comment":"<p>The enumeration <code>HtmlWarningCode</code> defines the error codes used for warnings in HTML files.\nThe convention for this class is for the name of the error code to indicate the problem that\ncaused the error to be generated and for the error message to explain what is wrong and, when\nappropriate, how the problem can be corrected.</p>","isAbstract":false,"superclass":"analyzer/analyzer.Enum","implements":["analyzer/analyzer.ErrorCode"],"subclass":[],"variables":{"INVALID_URI":{"name":"INVALID_URI","qualifiedName":"analyzer/analyzer.HtmlWarningCode.INVALID_URI","comment":"<p>An error code indicating that the value of the 'src' attribute of a Dart script tag is not a\nvalid URI.</p>\n<p>@param uri the URI that is invalid</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HtmlWarningCode","inner":[]}],"annotations":[]},"URI_DOES_NOT_EXIST":{"name":"URI_DOES_NOT_EXIST","qualifiedName":"analyzer/analyzer.HtmlWarningCode.URI_DOES_NOT_EXIST","comment":"<p>An error code indicating that the value of the 'src' attribute of a Dart script tag references\na file that does not exist.</p>\n<p>@param uri the URI pointing to a non-existent file</p>","final":false,"static":true,"constant":true,"type":[{"outer":"analyzer/analyzer.HtmlWarningCode","inner":[]}],"annotations":[]},"correction":{"name":"correction","qualifiedName":"analyzer/analyzer.HtmlWarningCode.correction","comment":"<p>The template used to create the correction to be displayed for this error, or <code>null</code> if\nthere is no correction information for this error.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"message":{"name":"message","qualifiedName":"analyzer/analyzer.HtmlWarningCode.message","comment":"<p>The template used to create the message to be displayed for this error.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"values":{"name":"values","qualifiedName":"analyzer/analyzer.HtmlWarningCode.values","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.HtmlWarningCode","inner":[]}]}],"annotations":[]}},"inheritedVariables":{"name":{"name":"name","qualifiedName":"analyzer/analyzer.Enum.name","comment":"<p>The name of this enum constant, as declared in the enum declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"ordinal":{"name":"ordinal","qualifiedName":"analyzer/analyzer.Enum.ordinal","comment":"<p>The position in the enum declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"errorSeverity":{"name":"errorSeverity","qualifiedName":"analyzer/analyzer.HtmlWarningCode.errorSeverity","comment":"<p>Return the severity of this error.</p>\n<p>@return the severity of this error</p>","commentFrom":"analyzer.ErrorCode.errorSeverity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorSeverity","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"type":{"name":"type","qualifiedName":"analyzer/analyzer.HtmlWarningCode.type","comment":"<p>Return the type of the error.</p>\n<p>@return the type of the error</p>","commentFrom":"analyzer.ErrorCode.type","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorType","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}},"constructors":{"con1":{"name":"con1","qualifiedName":"analyzer/analyzer.HtmlWarningCode.HtmlWarningCode-con1","comment":"<p>Initialize a newly created error code to have the given message.</p>\n<p>@param message the message template used to create the message to be displayed for the error</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"ordinal":{"name":"ordinal","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"con2":{"name":"con2","qualifiedName":"analyzer/analyzer.HtmlWarningCode.HtmlWarningCode-con2","comment":"<p>Initialize a newly created error code to have the given message and correction.</p>\n<p>@param message the template used to create the message to be displayed for the error\n@param correction the template used to create the correction to be displayed for the error</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"ordinal":{"name":"ordinal","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"correction":{"name":"correction","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"correction":{"name":"correction","qualifiedName":"analyzer/analyzer.HtmlWarningCode.correction","comment":"<p>Return the template used to create the correction to be displayed for this error, or\n<code>null</code> if there is no correction information for this error. The correction should\nindicate how the user can fix the error.</p>\n<p>@return the template used to create the correction to be displayed for this error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.correction","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"errorSeverity":{"name":"errorSeverity","qualifiedName":"analyzer/analyzer.HtmlWarningCode.errorSeverity","comment":"<p>Return the severity of this error.</p>\n<p>@return the severity of this error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.errorSeverity","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorSeverity","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.HtmlWarningCode.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.HtmlWarningCode.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"message":{"name":"message","qualifiedName":"analyzer/analyzer.HtmlWarningCode.message","comment":"<p>Return the template used to create the message to be displayed for this error. The message\nshould indicate what is wrong and why it is wrong.</p>\n<p>@return the template used to create the message to be displayed for this error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.message","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.HtmlWarningCode.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"analyzer/analyzer.HtmlWarningCode.type","comment":"<p>Return the type of the error.</p>\n<p>@return the type of the error</p>","commentFrom":"","inheritedFrom":"analyzer.ErrorCode.type","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/analyzer.ErrorType","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.HtmlWarningCode.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.HtmlWarningCode.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.HtmlWarningCode.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"analyzer/analyzer.HtmlWarningCode.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>analyzer/analyzer.HtmlWarningCode.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>analyzer/analyzer.HtmlWarningCode.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>analyzer/analyzer.HtmlWarningCode.compareTo.other</a>,\nand zero if <code>this</code> and <a>analyzer/analyzer.HtmlWarningCode.compareTo.other</a> are ordered together.</p>\n<p>The <a>analyzer/analyzer.HtmlWarningCode.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"dart-core.Comparable.compareTo","inheritedFrom":"analyzer.Enum.compareTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Enum.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.HtmlWarningCode.noSuchMethod","comment":"<p><a>analyzer/analyzer.HtmlWarningCode.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.HtmlWarningCode.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.HtmlWarningCode.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.HtmlWarningCode.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.HtmlWarningCode.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}