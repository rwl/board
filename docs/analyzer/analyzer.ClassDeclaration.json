{"name":"ClassDeclaration","qualifiedName":"analyzer/analyzer.ClassDeclaration","comment":"<p>Instances of the class <code>ClassDeclaration</code> represent the declaration of a class.</p><pre>\nclassDeclaration ::=\n    'abstract'? 'class' [SimpleIdentifier] [TypeParameterList]?\n    ([ExtendsClause] [WithClause]?)?\n    [ImplementsClause]?\n    '{' [ClassMember]* '}'\n</pre>","isAbstract":false,"superclass":"analyzer/analyzer.CompilationUnitMember","implements":[],"subclass":[],"variables":{"abstractKeyword":{"name":"abstractKeyword","qualifiedName":"analyzer/analyzer.ClassDeclaration.abstractKeyword","comment":"<p>The 'abstract' keyword, or <code>null</code> if the keyword was absent.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"classKeyword":{"name":"classKeyword","qualifiedName":"analyzer/analyzer.ClassDeclaration.classKeyword","comment":"<p>The token representing the 'class' keyword.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"leftBracket":{"name":"leftBracket","qualifiedName":"analyzer/analyzer.ClassDeclaration.leftBracket","comment":"<p>The left curly bracket.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"nativeClause":{"name":"nativeClause","qualifiedName":"analyzer/analyzer.ClassDeclaration.nativeClause","comment":"<p>The native clause for the class, or <code>null</code> if the class does not have a native clause.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/analyzer.NativeClause","inner":[]}],"annotations":[]},"rightBracket":{"name":"rightBracket","qualifiedName":"analyzer/analyzer.ClassDeclaration.rightBracket","comment":"<p>The right curly bracket.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"typeParameters":{"name":"typeParameters","qualifiedName":"analyzer/analyzer.ClassDeclaration.typeParameters","comment":"<p>The type parameters for the class, or <code>null</code> if the class does not have any type\nparameters.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/analyzer.TypeParameterList","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"extendsClause=":{"name":"extendsClause=","qualifiedName":"analyzer/analyzer.ClassDeclaration.extendsClause=","comment":"<p>Set the extends clause for this class to the given clause.</p>\n<p>@param extendsClause the extends clause for this class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"extendsClause":{"name":"extendsClause","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ExtendsClause","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"implementsClause=":{"name":"implementsClause=","qualifiedName":"analyzer/analyzer.ClassDeclaration.implementsClause=","comment":"<p>Set the implements clause for the class to the given clause.</p>\n<p>@param implementsClause the implements clause for the class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"implementsClause":{"name":"implementsClause","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ImplementsClause","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"name=":{"name":"name=","qualifiedName":"analyzer/analyzer.ClassDeclaration.name=","comment":"<p>Set the name of the class being declared to the given identifier.</p>\n<p>@param identifier the name of the class being declared</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"identifier":{"name":"identifier","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"withClause=":{"name":"withClause=","qualifiedName":"analyzer/analyzer.ClassDeclaration.withClause=","comment":"<p>Set the with clause for the class to the given clause.</p>\n<p>@param withClause the with clause for the class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"withClause":{"name":"withClause","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.WithClause","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"element":{"name":"element","qualifiedName":"analyzer/analyzer.ClassDeclaration.element","comment":"<p>Return the element associated with this declaration, or <code>null</code> if either this node\ncorresponds to a list of declarations or if the AST structure has not been resolved.</p>\n<p>@return the element associated with this declaration</p>","commentFrom":"analyzer.Declaration.element","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ClassElement","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.ClassDeclaration.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"analyzer.AstNode.endToken","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"extendsClause":{"name":"extendsClause","qualifiedName":"analyzer/analyzer.ClassDeclaration.extendsClause","comment":"<p>Return the extends clause for this class, or <code>null</code> if the class does not extend any\nother class.</p>\n<p>@return the extends clause for this class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ExtendsClause","inner":[]}],"parameters":{},"annotations":[]},"firstTokenAfterCommentAndMetadata":{"name":"firstTokenAfterCommentAndMetadata","qualifiedName":"analyzer/analyzer.ClassDeclaration.firstTokenAfterCommentAndMetadata","comment":"<p>Return the first token following the comment and metadata.</p>\n<p>@return the first token following the comment and metadata</p>","commentFrom":"analyzer.AnnotatedNode.firstTokenAfterCommentAndMetadata","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"implementsClause":{"name":"implementsClause","qualifiedName":"analyzer/analyzer.ClassDeclaration.implementsClause","comment":"<p>Return the implements clause for the class, or <code>null</code> if the class does not implement any\ninterfaces.</p>\n<p>@return the implements clause for the class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ImplementsClause","inner":[]}],"parameters":{},"annotations":[]},"members":{"name":"members","qualifiedName":"analyzer/analyzer.ClassDeclaration.members","comment":"<p>Return the members defined by the class.</p>\n<p>@return the members defined by the class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.NodeList","inner":[{"outer":"analyzer/analyzer.ClassMember","inner":[]}]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"analyzer/analyzer.ClassDeclaration.name","comment":"<p>Return the name of the class being declared.</p>\n<p>@return the name of the class being declared</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"parameters":{},"annotations":[]},"withClause":{"name":"withClause","qualifiedName":"analyzer/analyzer.ClassDeclaration.withClause","comment":"<p>Return the with clause for the class, or <code>null</code> if the class does not have a with clause.</p>\n<p>@return the with clause for the class</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.WithClause","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"analyzer/analyzer.ClassDeclaration.ClassDeclaration-","comment":"<p>Initialize a newly created class declaration.</p>\n<p>@param comment the documentation comment associated with this class\n@param metadata the annotations associated with this class\n@param abstractKeyword the 'abstract' keyword, or <code>null</code> if the keyword was absent\n@param classKeyword the token representing the 'class' keyword\n@param name the name of the class being declared\n@param typeParameters the type parameters for the class\n@param extendsClause the extends clause for the class\n@param withClause the with clause for the class\n@param implementsClause the implements clause for the class\n@param leftBracket the left curly bracket\n@param members the members defined by the class\n@param rightBracket the right curly bracket</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"comment":{"name":"comment","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"value":null,"annotations":[]},"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"value":null,"annotations":[]},"abstractKeyword":{"name":"abstractKeyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"classKeyword":{"name":"classKeyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"value":null,"annotations":[]},"typeParameters":{"name":"typeParameters","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.TypeParameterList","inner":[]}],"value":null,"annotations":[]},"extendsClause":{"name":"extendsClause","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ExtendsClause","inner":[]}],"value":null,"annotations":[]},"withClause":{"name":"withClause","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.WithClause","inner":[]}],"value":null,"annotations":[]},"implementsClause":{"name":"implementsClause","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ImplementsClause","inner":[]}],"value":null,"annotations":[]},"leftBracket":{"name":"leftBracket","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"members":{"name":"members","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.ClassMember","inner":[]}]}],"value":null,"annotations":[]},"rightBracket":{"name":"rightBracket","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.ClassDeclaration.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"analyzer.AstNode.accept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"getConstructor":{"name":"getConstructor","qualifiedName":"analyzer/analyzer.ClassDeclaration.getConstructor","comment":"<p>Return the constructor declared in the class with the given name.</p>\n<p>@param name the name of the constructor to find, <code>null</code> for default\n@return the found constructor or <code>null</code> if not found</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.ConstructorDeclaration","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getField":{"name":"getField","qualifiedName":"analyzer/analyzer.ClassDeclaration.getField","comment":"<p>Return the field declared in the class with the given name.</p>\n<p>@param name the name of the field to find\n@return the found field or <code>null</code> if not found</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.VariableDeclaration","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getMethod":{"name":"getMethod","qualifiedName":"analyzer/analyzer.ClassDeclaration.getMethod","comment":"<p>Return the method declared in the class with the given name.</p>\n<p>@param name the name of the method to find\n@return the found method or <code>null</code> if not found</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.MethodDeclaration","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.ClassDeclaration.visitChildren","comment":"","commentFrom":"analyzer.AnnotatedNode.visitChildren","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"inheritedMethods":{"setters":{"documentationComment=":{"name":"documentationComment=","qualifiedName":"analyzer/analyzer.ClassDeclaration.documentationComment=","comment":"<p>Set the documentation comment associated with this node to the given comment.</p>\n<p>@param comment the documentation comment to be associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.documentationComment=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"comment":{"name":"comment","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"analyzer/analyzer.ClassDeclaration.metadata=","comment":"<p>Set the metadata associated with this node to the given metadata.</p>\n<p>@param metadata the metadata to be associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.metadata=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"parent=":{"name":"parent=","qualifiedName":"analyzer/analyzer.ClassDeclaration.parent=","comment":"<p>Set the parent of this node to the given node.</p>\n<p>@param newParent the node that is to be made the parent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newParent":{"name":"newParent","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.ClassDeclaration.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"analyzer.AstNode.beginToken","inheritedFrom":"analyzer.AnnotatedNode.beginToken","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"documentationComment":{"name":"documentationComment","qualifiedName":"analyzer/analyzer.ClassDeclaration.documentationComment","comment":"<p>Return the documentation comment associated with this node, or <code>null</code> if this node does\nnot have a documentation comment associated with it.</p>\n<p>@return the documentation comment associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.documentationComment","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"analyzer/analyzer.ClassDeclaration.element","comment":"<p>Return the element associated with this declaration, or <code>null</code> if either this node\ncorresponds to a list of declarations or if the AST structure has not been resolved.</p>\n<p>@return the element associated with this declaration</p>","commentFrom":"","inheritedFrom":"analyzer.Declaration.element","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-element.Element","inner":[]}],"parameters":{},"annotations":[]},"end":{"name":"end","qualifiedName":"analyzer/analyzer.ClassDeclaration.end","comment":"<p>Return the offset of the character immediately following the last character of this node's\nsource range. This is equivalent to <code>node.getOffset() + node.getLength()</code>. For a\ncompilation unit this will be equal to the length of the unit's source. For synthetic nodes\nthis will be equivalent to the node's offset (because the length is zero (0) by definition).</p>\n<p>@return the offset of the character just past the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.end","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.ClassDeclaration.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.endToken","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"firstTokenAfterCommentAndMetadata":{"name":"firstTokenAfterCommentAndMetadata","qualifiedName":"analyzer/analyzer.ClassDeclaration.firstTokenAfterCommentAndMetadata","comment":"<p>Return the first token following the comment and metadata.</p>\n<p>@return the first token following the comment and metadata</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.firstTokenAfterCommentAndMetadata","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.ClassDeclaration.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.ClassDeclaration.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isSynthetic":{"name":"isSynthetic","qualifiedName":"analyzer/analyzer.ClassDeclaration.isSynthetic","comment":"<p>Return <code>true</code> if this node is a synthetic node. A synthetic node is a node that was\nintroduced by the parser in order to recover from an error in the code. Synthetic nodes always\nhave a length of zero (<code>0</code>).</p>\n<p>@return <code>true</code> if this node is a synthetic node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.isSynthetic","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"analyzer/analyzer.ClassDeclaration.length","comment":"<p>Return the number of characters in the node's source range.</p>\n<p>@return the number of characters in the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"analyzer/analyzer.ClassDeclaration.metadata","comment":"<p>Return the annotations associated with this node.</p>\n<p>@return the annotations associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.metadata","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.NodeList","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"parameters":{},"annotations":[]},"offset":{"name":"offset","qualifiedName":"analyzer/analyzer.ClassDeclaration.offset","comment":"<p>Return the offset from the beginning of the file to the first character in the node's source\nrange.</p>\n<p>@return the offset from the beginning of the file to the first character in the node's source</p>\n<pre><code>    range\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AstNode.offset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"analyzer/analyzer.ClassDeclaration.parent","comment":"<p>Return this node's parent node, or <code>null</code> if this node is the root of an AST structure.</p>\n<p>Note that the relationship between an AST node and its parent node may change over the lifetime\nof a node.</p>\n<p>@return the parent of this node, or <code>null</code> if none</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"analyzer/analyzer.ClassDeclaration.root","comment":"<p>Return the node at the root of this node's AST structure. Note that this method's performance\nis linear with respect to the depth of the node in the AST structure (O(depth)).</p>\n<p>@return the node at the root of this node's AST structure</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.root","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.ClassDeclaration.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"sortedCommentAndAnnotations":{"name":"sortedCommentAndAnnotations","qualifiedName":"analyzer/analyzer.ClassDeclaration.sortedCommentAndAnnotations","comment":"<p>Return an array containing the comment and annotations associated with this node, sorted in\nlexical order.</p>\n<p>@return the comment and annotations associated with this node in the order in which they</p>\n<pre><code>    appeared in the original source\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.sortedCommentAndAnnotations","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.AstNode","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.ClassDeclaration.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.ClassDeclaration.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.ClassDeclaration.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.ClassDeclaration.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.accept","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"becomeParentOf":{"name":"becomeParentOf","qualifiedName":"analyzer/analyzer.ClassDeclaration.becomeParentOf","comment":"<p>Make this node the parent of the given child node.</p>\n<p>@param child the node that will become a child of this node\n@return the node that was made a child of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.becomeParentOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAncestor":{"name":"getAncestor","qualifiedName":"analyzer/analyzer.ClassDeclaration.getAncestor","comment":"<p>Return the node of the given class that most immediately encloses this node, or <code>null</code> if\nthere is no enclosing node of the given class.</p>\n<p>@param nodeClass the class of the node to be returned\n@return the node of the given type that encloses this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getAncestor","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/java-engine.Predicate","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getProperty":{"name":"getProperty","qualifiedName":"analyzer/analyzer.ClassDeclaration.getProperty","comment":"<p>Return the value of the property with the given name, or <code>null</code> if this node does not\nhave a property with the given name.</p>\n<p>@return the value of the property with the given name</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.ClassDeclaration.noSuchMethod","comment":"<p><a>analyzer/analyzer.ClassDeclaration.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.ClassDeclaration.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.ClassDeclaration.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.ClassDeclaration.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"safelyVisitChild":{"name":"safelyVisitChild","qualifiedName":"analyzer/analyzer.ClassDeclaration.safelyVisitChild","comment":"<p>If the given child is not <code>null</code>, use the given visitor to visit it.</p>\n<p>@param child the child to be visited\n@param visitor the visitor that will be used to visit the child</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.safelyVisitChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setProperty":{"name":"setProperty","qualifiedName":"analyzer/analyzer.ClassDeclaration.setProperty","comment":"<p>Set the value of the property with the given name to the given value. If the value is\n<code>null</code>, the property will effectively be removed.</p>\n<p>@param propertyName the name of the property whose value is to be set\n@param propertyValue the new value of the property</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.setProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"propertyValue":{"name":"propertyValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSource":{"name":"toSource","qualifiedName":"analyzer/analyzer.ClassDeclaration.toSource","comment":"<p>Return a textual description of this node in a form approximating valid source. The returned\nstring will not be valid source primarily in the case where the node itself is not well-formed.</p>\n<p>@return the source code equivalent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.toSource","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.ClassDeclaration.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"analyzer.AstNode.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.ClassDeclaration.visitChildren","comment":"<p>Use the given visitor to visit all of the children of this node. The children will be visited\nin source order.</p>\n<p>@param visitor the visitor that will be used to visit the children of this node</p>","commentFrom":"analyzer.AstNode.visitChildren","inheritedFrom":"analyzer.AnnotatedNode.visitChildren","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"annotations":[],"generics":{}}