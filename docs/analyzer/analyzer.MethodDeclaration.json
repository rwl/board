{"name":"MethodDeclaration","qualifiedName":"analyzer/analyzer.MethodDeclaration","comment":"<p>Instances of the class <code>MethodDeclaration</code> represent a method declaration.</p><pre>\nmethodDeclaration ::=\n    methodSignature [FunctionBody]\n<p>methodSignature ::=</p>\n<pre><code>'external'? ('abstract' | 'static')? [Type]? ('get' | 'set')? methodName\n[FormalParameterList]\n</code></pre>\n<p>methodName ::=</p>\n<pre><code>[SimpleIdentifier]\n</code></pre>\n<p>  | 'operator' <a>analyzer/analyzer.SimpleIdentifier</a>\n&lt;/pre></p>","isAbstract":false,"superclass":"analyzer/analyzer.ClassMember","implements":[],"subclass":[],"variables":{"externalKeyword":{"name":"externalKeyword","qualifiedName":"analyzer/analyzer.MethodDeclaration.externalKeyword","comment":"<p>The token for the 'external' keyword, or <code>null</code> if the constructor is not external.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"modifierKeyword":{"name":"modifierKeyword","qualifiedName":"analyzer/analyzer.MethodDeclaration.modifierKeyword","comment":"<p>The token representing the 'abstract' or 'static' keyword, or <code>null</code> if neither modifier\nwas specified.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"operatorKeyword":{"name":"operatorKeyword","qualifiedName":"analyzer/analyzer.MethodDeclaration.operatorKeyword","comment":"<p>The token representing the 'operator' keyword, or <code>null</code> if this method does not declare\nan operator.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"propertyKeyword":{"name":"propertyKeyword","qualifiedName":"analyzer/analyzer.MethodDeclaration.propertyKeyword","comment":"<p>The token representing the 'get' or 'set' keyword, or <code>null</code> if this is a method\ndeclaration rather than a property declaration.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"body=":{"name":"body=","qualifiedName":"analyzer/analyzer.MethodDeclaration.body=","comment":"<p>Set the body of the method to the given function body.</p>\n<p>@param functionBody the body of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"functionBody":{"name":"functionBody","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.FunctionBody","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"name=":{"name":"name=","qualifiedName":"analyzer/analyzer.MethodDeclaration.name=","comment":"<p>Set the name of the method to the given identifier.</p>\n<p>@param identifier the name of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"identifier":{"name":"identifier","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parameters=":{"name":"parameters=","qualifiedName":"analyzer/analyzer.MethodDeclaration.parameters=","comment":"<p>Set the parameters associated with the method to the given list of parameters.</p>\n<p>@param parameters the parameters associated with the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.FormalParameterList","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"returnType=":{"name":"returnType=","qualifiedName":"analyzer/analyzer.MethodDeclaration.returnType=","comment":"<p>Set the return type of the method to the given type name.</p>\n<p>@param typeName the return type of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"typeName":{"name":"typeName","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.TypeName","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"body":{"name":"body","qualifiedName":"analyzer/analyzer.MethodDeclaration.body","comment":"<p>Return the body of the method.</p>\n<p>@return the body of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.FunctionBody","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"analyzer/analyzer.MethodDeclaration.element","comment":"<p>Return the element associated with this method, or <code>null</code> if the AST structure has not\nbeen resolved. The element can either be a <a>analyzer/engine-element.MethodElement</a>, if this represents the\ndeclaration of a normal method, or a <a>analyzer/engine-element.PropertyAccessorElement</a> if this represents the\ndeclaration of either a getter or a setter.</p>\n<p>@return the element associated with this method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ExecutableElement","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.MethodDeclaration.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"analyzer.AstNode.endToken","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"firstTokenAfterCommentAndMetadata":{"name":"firstTokenAfterCommentAndMetadata","qualifiedName":"analyzer/analyzer.MethodDeclaration.firstTokenAfterCommentAndMetadata","comment":"<p>Return the first token following the comment and metadata.</p>\n<p>@return the first token following the comment and metadata</p>","commentFrom":"analyzer.AnnotatedNode.firstTokenAfterCommentAndMetadata","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"isAbstract":{"name":"isAbstract","qualifiedName":"analyzer/analyzer.MethodDeclaration.isAbstract","comment":"<p>Return <code>true</code> if this method is declared to be an abstract method.</p>\n<p>@return <code>true</code> if this method is declared to be an abstract method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isGetter":{"name":"isGetter","qualifiedName":"analyzer/analyzer.MethodDeclaration.isGetter","comment":"<p>Return <code>true</code> if this method declares a getter.</p>\n<p>@return <code>true</code> if this method declares a getter</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isOperator":{"name":"isOperator","qualifiedName":"analyzer/analyzer.MethodDeclaration.isOperator","comment":"<p>Return <code>true</code> if this method declares an operator.</p>\n<p>@return <code>true</code> if this method declares an operator</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isSetter":{"name":"isSetter","qualifiedName":"analyzer/analyzer.MethodDeclaration.isSetter","comment":"<p>Return <code>true</code> if this method declares a setter.</p>\n<p>@return <code>true</code> if this method declares a setter</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isStatic":{"name":"isStatic","qualifiedName":"analyzer/analyzer.MethodDeclaration.isStatic","comment":"<p>Return <code>true</code> if this method is declared to be a static method.</p>\n<p>@return <code>true</code> if this method is declared to be a static method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"analyzer/analyzer.MethodDeclaration.name","comment":"<p>Return the name of the method.</p>\n<p>@return the name of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"parameters":{},"annotations":[]},"parameters":{"name":"parameters","qualifiedName":"analyzer/analyzer.MethodDeclaration.parameters","comment":"<p>Return the parameters associated with the method, or <code>null</code> if this method declares a\ngetter.</p>\n<p>@return the parameters associated with the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.FormalParameterList","inner":[]}],"parameters":{},"annotations":[]},"returnType":{"name":"returnType","qualifiedName":"analyzer/analyzer.MethodDeclaration.returnType","comment":"<p>Return the return type of the method, or <code>null</code> if no return type was declared.</p>\n<p>@return the return type of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.TypeName","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"analyzer/analyzer.MethodDeclaration.MethodDeclaration-","comment":"<p>Initialize a newly created method declaration.</p>\n<p>@param externalKeyword the token for the 'external' keyword\n@param comment the documentation comment associated with this method\n@param metadata the annotations associated with this method\n@param modifierKeyword the token representing the 'abstract' or 'static' keyword\n@param returnType the return type of the method\n@param propertyKeyword the token representing the 'get' or 'set' keyword\n@param operatorKeyword the token representing the 'operator' keyword\n@param name the name of the method\n@param parameters the parameters associated with the method, or <code>null</code> if this method</p>\n<pre><code>     declares a getter\n</code></pre>\n<p>@param body the body of the method</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"comment":{"name":"comment","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"value":null,"annotations":[]},"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"value":null,"annotations":[]},"externalKeyword":{"name":"externalKeyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"modifierKeyword":{"name":"modifierKeyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"returnType":{"name":"returnType","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.TypeName","inner":[]}],"value":null,"annotations":[]},"propertyKeyword":{"name":"propertyKeyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"operatorKeyword":{"name":"operatorKeyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"value":null,"annotations":[]},"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.FormalParameterList","inner":[]}],"value":null,"annotations":[]},"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.FunctionBody","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.MethodDeclaration.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"analyzer.AstNode.accept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.MethodDeclaration.visitChildren","comment":"","commentFrom":"analyzer.AnnotatedNode.visitChildren","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"inheritedMethods":{"setters":{"documentationComment=":{"name":"documentationComment=","qualifiedName":"analyzer/analyzer.MethodDeclaration.documentationComment=","comment":"<p>Set the documentation comment associated with this node to the given comment.</p>\n<p>@param comment the documentation comment to be associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.documentationComment=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"comment":{"name":"comment","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"analyzer/analyzer.MethodDeclaration.metadata=","comment":"<p>Set the metadata associated with this node to the given metadata.</p>\n<p>@param metadata the metadata to be associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.metadata=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"parent=":{"name":"parent=","qualifiedName":"analyzer/analyzer.MethodDeclaration.parent=","comment":"<p>Set the parent of this node to the given node.</p>\n<p>@param newParent the node that is to be made the parent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newParent":{"name":"newParent","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.MethodDeclaration.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"analyzer.AstNode.beginToken","inheritedFrom":"analyzer.AnnotatedNode.beginToken","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"documentationComment":{"name":"documentationComment","qualifiedName":"analyzer/analyzer.MethodDeclaration.documentationComment","comment":"<p>Return the documentation comment associated with this node, or <code>null</code> if this node does\nnot have a documentation comment associated with it.</p>\n<p>@return the documentation comment associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.documentationComment","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"analyzer/analyzer.MethodDeclaration.element","comment":"<p>Return the element associated with this declaration, or <code>null</code> if either this node\ncorresponds to a list of declarations or if the AST structure has not been resolved.</p>\n<p>@return the element associated with this declaration</p>","commentFrom":"","inheritedFrom":"analyzer.Declaration.element","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-element.Element","inner":[]}],"parameters":{},"annotations":[]},"end":{"name":"end","qualifiedName":"analyzer/analyzer.MethodDeclaration.end","comment":"<p>Return the offset of the character immediately following the last character of this node's\nsource range. This is equivalent to <code>node.getOffset() + node.getLength()</code>. For a\ncompilation unit this will be equal to the length of the unit's source. For synthetic nodes\nthis will be equivalent to the node's offset (because the length is zero (0) by definition).</p>\n<p>@return the offset of the character just past the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.end","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.MethodDeclaration.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.endToken","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"firstTokenAfterCommentAndMetadata":{"name":"firstTokenAfterCommentAndMetadata","qualifiedName":"analyzer/analyzer.MethodDeclaration.firstTokenAfterCommentAndMetadata","comment":"<p>Return the first token following the comment and metadata.</p>\n<p>@return the first token following the comment and metadata</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.firstTokenAfterCommentAndMetadata","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.MethodDeclaration.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.MethodDeclaration.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isSynthetic":{"name":"isSynthetic","qualifiedName":"analyzer/analyzer.MethodDeclaration.isSynthetic","comment":"<p>Return <code>true</code> if this node is a synthetic node. A synthetic node is a node that was\nintroduced by the parser in order to recover from an error in the code. Synthetic nodes always\nhave a length of zero (<code>0</code>).</p>\n<p>@return <code>true</code> if this node is a synthetic node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.isSynthetic","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"analyzer/analyzer.MethodDeclaration.length","comment":"<p>Return the number of characters in the node's source range.</p>\n<p>@return the number of characters in the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"analyzer/analyzer.MethodDeclaration.metadata","comment":"<p>Return the annotations associated with this node.</p>\n<p>@return the annotations associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.metadata","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.NodeList","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"parameters":{},"annotations":[]},"offset":{"name":"offset","qualifiedName":"analyzer/analyzer.MethodDeclaration.offset","comment":"<p>Return the offset from the beginning of the file to the first character in the node's source\nrange.</p>\n<p>@return the offset from the beginning of the file to the first character in the node's source</p>\n<pre><code>    range\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AstNode.offset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"analyzer/analyzer.MethodDeclaration.parent","comment":"<p>Return this node's parent node, or <code>null</code> if this node is the root of an AST structure.</p>\n<p>Note that the relationship between an AST node and its parent node may change over the lifetime\nof a node.</p>\n<p>@return the parent of this node, or <code>null</code> if none</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"analyzer/analyzer.MethodDeclaration.root","comment":"<p>Return the node at the root of this node's AST structure. Note that this method's performance\nis linear with respect to the depth of the node in the AST structure (O(depth)).</p>\n<p>@return the node at the root of this node's AST structure</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.root","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.MethodDeclaration.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"sortedCommentAndAnnotations":{"name":"sortedCommentAndAnnotations","qualifiedName":"analyzer/analyzer.MethodDeclaration.sortedCommentAndAnnotations","comment":"<p>Return an array containing the comment and annotations associated with this node, sorted in\nlexical order.</p>\n<p>@return the comment and annotations associated with this node in the order in which they</p>\n<pre><code>    appeared in the original source\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.sortedCommentAndAnnotations","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.AstNode","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.MethodDeclaration.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.MethodDeclaration.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.MethodDeclaration.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.MethodDeclaration.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.accept","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"becomeParentOf":{"name":"becomeParentOf","qualifiedName":"analyzer/analyzer.MethodDeclaration.becomeParentOf","comment":"<p>Make this node the parent of the given child node.</p>\n<p>@param child the node that will become a child of this node\n@return the node that was made a child of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.becomeParentOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAncestor":{"name":"getAncestor","qualifiedName":"analyzer/analyzer.MethodDeclaration.getAncestor","comment":"<p>Return the node of the given class that most immediately encloses this node, or <code>null</code> if\nthere is no enclosing node of the given class.</p>\n<p>@param nodeClass the class of the node to be returned\n@return the node of the given type that encloses this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getAncestor","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/java-engine.Predicate","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getProperty":{"name":"getProperty","qualifiedName":"analyzer/analyzer.MethodDeclaration.getProperty","comment":"<p>Return the value of the property with the given name, or <code>null</code> if this node does not\nhave a property with the given name.</p>\n<p>@return the value of the property with the given name</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.MethodDeclaration.noSuchMethod","comment":"<p><a>analyzer/analyzer.MethodDeclaration.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.MethodDeclaration.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.MethodDeclaration.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.MethodDeclaration.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"safelyVisitChild":{"name":"safelyVisitChild","qualifiedName":"analyzer/analyzer.MethodDeclaration.safelyVisitChild","comment":"<p>If the given child is not <code>null</code>, use the given visitor to visit it.</p>\n<p>@param child the child to be visited\n@param visitor the visitor that will be used to visit the child</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.safelyVisitChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setProperty":{"name":"setProperty","qualifiedName":"analyzer/analyzer.MethodDeclaration.setProperty","comment":"<p>Set the value of the property with the given name to the given value. If the value is\n<code>null</code>, the property will effectively be removed.</p>\n<p>@param propertyName the name of the property whose value is to be set\n@param propertyValue the new value of the property</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.setProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"propertyValue":{"name":"propertyValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSource":{"name":"toSource","qualifiedName":"analyzer/analyzer.MethodDeclaration.toSource","comment":"<p>Return a textual description of this node in a form approximating valid source. The returned\nstring will not be valid source primarily in the case where the node itself is not well-formed.</p>\n<p>@return the source code equivalent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.toSource","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.MethodDeclaration.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"analyzer.AstNode.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.MethodDeclaration.visitChildren","comment":"<p>Use the given visitor to visit all of the children of this node. The children will be visited\nin source order.</p>\n<p>@param visitor the visitor that will be used to visit the children of this node</p>","commentFrom":"analyzer.AstNode.visitChildren","inheritedFrom":"analyzer.AnnotatedNode.visitChildren","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"annotations":[],"generics":{}}