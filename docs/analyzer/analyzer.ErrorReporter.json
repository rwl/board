{"name":"ErrorReporter","qualifiedName":"analyzer/analyzer.ErrorReporter","comment":"<p>Instances of the class <code>ErrorReporter</code> wrap an error listener with utility methods used to\ncreate the errors being reported.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"source=":{"name":"source=","qualifiedName":"analyzer/analyzer.ErrorReporter.source=","comment":"<p>Set the source to be used when reporting errors. Setting the source to <code>null</code> will cause\nthe default source to be used.</p>\n<p>@param source the source to be used when reporting errors</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-source.Source","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{},"constructors":{"":{"name":"","qualifiedName":"analyzer/analyzer.ErrorReporter.ErrorReporter-","comment":"<p>Initialize a newly created error reporter that will report errors to the given listener.</p>\n<p>@param errorListener the error listener to which errors will be reported\n@param defaultSource the default source to be used when reporting errors</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_errorListener":{"name":"_errorListener","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AnalysisErrorListener","inner":[]}],"value":null,"annotations":[]},"_defaultSource":{"name":"_defaultSource","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-source.Source","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"newErrorWithProperties":{"name":"newErrorWithProperties","qualifiedName":"analyzer/analyzer.ErrorReporter.newErrorWithProperties","comment":"<p>Creates an error with properties with the given error code and arguments.</p>\n<p>@param errorCode the error code of the error to be reported\n@param node the node specifying the location of the error\n@param arguments the arguments to the error, used to compose the error message</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AnalysisErrorWithProperties","inner":[]}],"parameters":{"errorCode":{"name":"errorCode","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ErrorCode","inner":[]}],"value":null,"annotations":[]},"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reportError":{"name":"reportError","qualifiedName":"analyzer/analyzer.ErrorReporter.reportError","comment":"<p>Report a passed error.</p>\n<p>@param error the error to report</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AnalysisError","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reportErrorForElement":{"name":"reportErrorForElement","qualifiedName":"analyzer/analyzer.ErrorReporter.reportErrorForElement","comment":"<p>Report an error with the given error code and arguments.</p>\n<p>@param errorCode the error code of the error to be reported\n@param element the element which name should be used as the location of the error\n@param arguments the arguments to the error, used to compose the error message</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorCode":{"name":"errorCode","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ErrorCode","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-element.Element","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reportErrorForNode":{"name":"reportErrorForNode","qualifiedName":"analyzer/analyzer.ErrorReporter.reportErrorForNode","comment":"<p>Report an error with the given error code and arguments.</p>\n<p>@param errorCode the error code of the error to be reported\n@param node the node specifying the location of the error\n@param arguments the arguments to the error, used to compose the error message</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorCode":{"name":"errorCode","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ErrorCode","inner":[]}],"value":null,"annotations":[]},"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reportErrorForOffset":{"name":"reportErrorForOffset","qualifiedName":"analyzer/analyzer.ErrorReporter.reportErrorForOffset","comment":"<p>Report an error with the given error code and arguments.</p>\n<p>@param errorCode the error code of the error to be reported\n@param offset the offset of the location of the error\n@param length the length of the location of the error\n@param arguments the arguments to the error, used to compose the error message</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorCode":{"name":"errorCode","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ErrorCode","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reportErrorForToken":{"name":"reportErrorForToken","qualifiedName":"analyzer/analyzer.ErrorReporter.reportErrorForToken","comment":"<p>Report an error with the given error code and arguments.</p>\n<p>@param errorCode the error code of the error to be reported\n@param token the token specifying the location of the error\n@param arguments the arguments to the error, used to compose the error message</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorCode":{"name":"errorCode","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.ErrorCode","inner":[]}],"value":null,"annotations":[]},"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"arguments":{"name":"arguments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.ErrorReporter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.ErrorReporter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.ErrorReporter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.ErrorReporter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.ErrorReporter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.ErrorReporter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.ErrorReporter.noSuchMethod","comment":"<p><a>analyzer/analyzer.ErrorReporter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.ErrorReporter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.ErrorReporter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.ErrorReporter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.ErrorReporter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}