{"name":"ImportDirective","qualifiedName":"analyzer/analyzer.ImportDirective","comment":"<p>Instances of the class <code>ImportDirective</code> represent an import directive.</p><pre>\nimportDirective ::=\n    [Annotation] 'import' [StringLiteral] ('as' identifier)? [Combinator]* ';'\n  | [Annotation] 'import' [StringLiteral] 'deferred' 'as' identifier [Combinator]* ';'\n</pre>","isAbstract":false,"superclass":"analyzer/analyzer.NamespaceDirective","implements":[],"subclass":[],"variables":{"COMPARATOR":{"name":"COMPARATOR","qualifiedName":"analyzer/analyzer.ImportDirective.COMPARATOR","comment":"","final":false,"static":true,"constant":false,"type":[{"outer":"dart-core.Comparator","inner":[]}],"annotations":[]},"asToken":{"name":"asToken","qualifiedName":"analyzer/analyzer.ImportDirective.asToken","comment":"<p>The token representing the 'as' token, or <code>null</code> if the imported names are not prefixed.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"deferredToken":{"name":"deferredToken","qualifiedName":"analyzer/analyzer.ImportDirective.deferredToken","comment":"<p>The token representing the 'deferred' token, or <code>null</code> if the imported is not deferred.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]}},"inheritedVariables":{"source":{"name":"source","qualifiedName":"analyzer/analyzer.UriBasedDirective.source","comment":"<p>The source to which the URI was resolved.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-source.Source","inner":[]}],"annotations":[]},"uriContent":{"name":"uriContent","qualifiedName":"analyzer/analyzer.UriBasedDirective.uriContent","comment":"<p>The content of the URI.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"keyword":{"name":"keyword","qualifiedName":"analyzer/analyzer.NamespaceDirective.keyword","comment":"<p>The token representing the 'import' or 'export' keyword.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]},"semicolon":{"name":"semicolon","qualifiedName":"analyzer/analyzer.NamespaceDirective.semicolon","comment":"<p>The semicolon terminating the directive.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"annotations":[]}},"methods":{"setters":{"prefix=":{"name":"prefix=","qualifiedName":"analyzer/analyzer.ImportDirective.prefix=","comment":"<p>Set the prefix to be used with the imported names to the given identifier.</p>\n<p>@param prefix the prefix to be used with the imported names</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"prefix":{"name":"prefix","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"element":{"name":"element","qualifiedName":"analyzer/analyzer.ImportDirective.element","comment":"<p>Return the element associated with this directive, or <code>null</code> if the AST structure has not\nbeen resolved or if this directive could not be resolved. Examples of the latter case include a\ndirective that contains an invalid URL or a URL that does not exist.</p>\n<p>@return the element associated with this directive</p>","commentFrom":"analyzer.Directive.element","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.ImportElement","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"prefix":{"name":"prefix","qualifiedName":"analyzer/analyzer.ImportDirective.prefix","comment":"<p>Return the prefix to be used with the imported names, or <code>null</code> if the imported names are\nnot prefixed.</p>\n<p>@return the prefix to be used with the imported names</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"parameters":{},"annotations":[]},"uriElement":{"name":"uriElement","qualifiedName":"analyzer/analyzer.ImportDirective.uriElement","comment":"","commentFrom":"analyzer.NamespaceDirective.uriElement","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.LibraryElement","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}},"constructors":{"":{"name":"","qualifiedName":"analyzer/analyzer.ImportDirective.ImportDirective-","comment":"<p>Initialize a newly created import directive.</p>\n<p>@param comment the documentation comment associated with this directive\n@param metadata the annotations associated with the directive\n@param keyword the token representing the 'import' keyword\n@param libraryUri the URI of the library being imported\n@param deferredToken the token representing the 'deferred' token\n@param asToken the token representing the 'as' token\n@param prefix the prefix to be used with the imported names\n@param combinators the combinators used to control how names are imported\n@param semicolon the semicolon terminating the directive</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"comment":{"name":"comment","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"value":null,"annotations":[]},"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"value":null,"annotations":[]},"keyword":{"name":"keyword","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"libraryUri":{"name":"libraryUri","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.StringLiteral","inner":[]}],"value":null,"annotations":[]},"deferredToken":{"name":"deferredToken","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"asToken":{"name":"asToken","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]},"prefix":{"name":"prefix","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.SimpleIdentifier","inner":[]}],"value":null,"annotations":[]},"combinators":{"name":"combinators","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Combinator","inner":[]}]}],"value":null,"annotations":[]},"semicolon":{"name":"semicolon","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.ImportDirective.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"analyzer.AstNode.accept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.ImportDirective.visitChildren","comment":"","commentFrom":"analyzer.UriBasedDirective.visitChildren","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"inheritedMethods":{"setters":{"documentationComment=":{"name":"documentationComment=","qualifiedName":"analyzer/analyzer.ImportDirective.documentationComment=","comment":"<p>Set the documentation comment associated with this node to the given comment.</p>\n<p>@param comment the documentation comment to be associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.documentationComment=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"comment":{"name":"comment","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"element=":{"name":"element=","qualifiedName":"analyzer/analyzer.ImportDirective.element=","comment":"<p>Set the element associated with this directive to the given element.</p>\n<p>@param element the element associated with this directive</p>","commentFrom":"","inheritedFrom":"analyzer.Directive.element=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/engine-element.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"metadata=":{"name":"metadata=","qualifiedName":"analyzer/analyzer.ImportDirective.metadata=","comment":"<p>Set the metadata associated with this node to the given metadata.</p>\n<p>@param metadata the metadata to be associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.metadata=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"parent=":{"name":"parent=","qualifiedName":"analyzer/analyzer.ImportDirective.parent=","comment":"<p>Set the parent of this node to the given node.</p>\n<p>@param newParent the node that is to be made the parent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newParent":{"name":"newParent","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"uri=":{"name":"uri=","qualifiedName":"analyzer/analyzer.ImportDirective.uri=","comment":"<p>Set the URI referenced by this directive to the given URI.</p>\n<p>@param uri the URI referenced by this directive</p>","commentFrom":"","inheritedFrom":"analyzer.UriBasedDirective.uri=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.StringLiteral","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"beginToken":{"name":"beginToken","qualifiedName":"analyzer/analyzer.ImportDirective.beginToken","comment":"<p>Return the first token included in this node's source range.</p>\n<p>@return the first token included in this node's source range</p>","commentFrom":"analyzer.AstNode.beginToken","inheritedFrom":"analyzer.AnnotatedNode.beginToken","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"combinators":{"name":"combinators","qualifiedName":"analyzer/analyzer.ImportDirective.combinators","comment":"<p>Return the combinators used to control how names are imported or exported.</p>\n<p>@return the combinators used to control how names are imported or exported</p>","commentFrom":"","inheritedFrom":"analyzer.NamespaceDirective.combinators","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.NodeList","inner":[{"outer":"analyzer/analyzer.Combinator","inner":[]}]}],"parameters":{},"annotations":[]},"documentationComment":{"name":"documentationComment","qualifiedName":"analyzer/analyzer.ImportDirective.documentationComment","comment":"<p>Return the documentation comment associated with this node, or <code>null</code> if this node does\nnot have a documentation comment associated with it.</p>\n<p>@return the documentation comment associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.documentationComment","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.Comment","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"analyzer/analyzer.ImportDirective.element","comment":"<p>Return the element associated with this directive, or <code>null</code> if the AST structure has not\nbeen resolved or if this directive could not be resolved. Examples of the latter case include a\ndirective that contains an invalid URL or a URL that does not exist.</p>\n<p>@return the element associated with this directive</p>","commentFrom":"","inheritedFrom":"analyzer.Directive.element","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-element.Element","inner":[]}],"parameters":{},"annotations":[]},"end":{"name":"end","qualifiedName":"analyzer/analyzer.ImportDirective.end","comment":"<p>Return the offset of the character immediately following the last character of this node's\nsource range. This is equivalent to <code>node.getOffset() + node.getLength()</code>. For a\ncompilation unit this will be equal to the length of the unit's source. For synthetic nodes\nthis will be equivalent to the node's offset (because the length is zero (0) by definition).</p>\n<p>@return the offset of the character just past the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.end","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"endToken":{"name":"endToken","qualifiedName":"analyzer/analyzer.ImportDirective.endToken","comment":"<p>Return the last token included in this node's source range.</p>\n<p>@return the last token included in this node's source range</p>","commentFrom":"analyzer.AstNode.endToken","inheritedFrom":"analyzer.NamespaceDirective.endToken","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"firstTokenAfterCommentAndMetadata":{"name":"firstTokenAfterCommentAndMetadata","qualifiedName":"analyzer/analyzer.ImportDirective.firstTokenAfterCommentAndMetadata","comment":"<p>Return the first token following the comment and metadata.</p>\n<p>@return the first token following the comment and metadata</p>","commentFrom":"analyzer.AnnotatedNode.firstTokenAfterCommentAndMetadata","inheritedFrom":"analyzer.NamespaceDirective.firstTokenAfterCommentAndMetadata","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"hashCode":{"name":"hashCode","qualifiedName":"analyzer/analyzer.ImportDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/analyzer.ImportDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isSynthetic":{"name":"isSynthetic","qualifiedName":"analyzer/analyzer.ImportDirective.isSynthetic","comment":"<p>Return <code>true</code> if this node is a synthetic node. A synthetic node is a node that was\nintroduced by the parser in order to recover from an error in the code. Synthetic nodes always\nhave a length of zero (<code>0</code>).</p>\n<p>@return <code>true</code> if this node is a synthetic node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.isSynthetic","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"keyword":{"name":"keyword","qualifiedName":"analyzer/analyzer.ImportDirective.keyword","comment":"<p>Return the token representing the keyword that introduces this directive ('import', 'export',\n'library' or 'part').</p>\n<p>@return the token representing the keyword that introduces this directive</p>","commentFrom":"","inheritedFrom":"analyzer.Directive.keyword","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-scanner.Token","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"analyzer/analyzer.ImportDirective.length","comment":"<p>Return the number of characters in the node's source range.</p>\n<p>@return the number of characters in the node's source range</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.length","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"metadata":{"name":"metadata","qualifiedName":"analyzer/analyzer.ImportDirective.metadata","comment":"<p>Return the annotations associated with this node.</p>\n<p>@return the annotations associated with this node</p>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.metadata","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.NodeList","inner":[{"outer":"analyzer/analyzer.Annotation","inner":[]}]}],"parameters":{},"annotations":[]},"offset":{"name":"offset","qualifiedName":"analyzer/analyzer.ImportDirective.offset","comment":"<p>Return the offset from the beginning of the file to the first character in the node's source\nrange.</p>\n<p>@return the offset from the beginning of the file to the first character in the node's source</p>\n<pre><code>    range\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AstNode.offset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"analyzer/analyzer.ImportDirective.parent","comment":"<p>Return this node's parent node, or <code>null</code> if this node is the root of an AST structure.</p>\n<p>Note that the relationship between an AST node and its parent node may change over the lifetime\nof a node.</p>\n<p>@return the parent of this node, or <code>null</code> if none</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.parent","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"analyzer/analyzer.ImportDirective.root","comment":"<p>Return the node at the root of this node's AST structure. Note that this method's performance\nis linear with respect to the depth of the node in the AST structure (O(depth)).</p>\n<p>@return the node at the root of this node's AST structure</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.root","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/analyzer.ImportDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"sortedCommentAndAnnotations":{"name":"sortedCommentAndAnnotations","qualifiedName":"analyzer/analyzer.ImportDirective.sortedCommentAndAnnotations","comment":"<p>Return an array containing the comment and annotations associated with this node, sorted in\nlexical order.</p>\n<p>@return the comment and annotations associated with this node in the order in which they</p>\n<pre><code>    appeared in the original source\n</code></pre>","commentFrom":"","inheritedFrom":"analyzer.AnnotatedNode.sortedCommentAndAnnotations","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"analyzer/analyzer.AstNode","inner":[]}]}],"parameters":{},"annotations":[]},"uri":{"name":"uri","qualifiedName":"analyzer/analyzer.ImportDirective.uri","comment":"<p>Return the URI referenced by this directive.</p>\n<p>@return the URI referenced by this directive</p>","commentFrom":"","inheritedFrom":"analyzer.UriBasedDirective.uri","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.StringLiteral","inner":[]}],"parameters":{},"annotations":[]},"uriElement":{"name":"uriElement","qualifiedName":"analyzer/analyzer.ImportDirective.uriElement","comment":"<p>Return the element associated with the URI of this directive, or <code>null</code> if the AST\nstructure has not been resolved or if the URI could not be resolved. Examples of the latter\ncase include a directive that contains an invalid URL or a URL that does not exist.</p>\n<p>@return the element associated with this directive</p>","commentFrom":"analyzer.UriBasedDirective.uriElement","inheritedFrom":"analyzer.NamespaceDirective.uriElement","static":false,"abstract":true,"constant":false,"return":[{"outer":"analyzer/engine-element.LibraryElement","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/analyzer.ImportDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/analyzer.ImportDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/analyzer.ImportDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"accept":{"name":"accept","qualifiedName":"analyzer/analyzer.ImportDirective.accept","comment":"<p>Use the given visitor to visit this node.</p>\n<p>@param visitor the visitor that will visit this node\n@return the value returned by the visitor as a result of visiting this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.accept","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"becomeParentOf":{"name":"becomeParentOf","qualifiedName":"analyzer/analyzer.ImportDirective.becomeParentOf","comment":"<p>Make this node the parent of the given child node.</p>\n<p>@param child the node that will become a child of this node\n@return the node that was made a child of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.becomeParentOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAncestor":{"name":"getAncestor","qualifiedName":"analyzer/analyzer.ImportDirective.getAncestor","comment":"<p>Return the node of the given class that most immediately encloses this node, or <code>null</code> if\nthere is no enclosing node of the given class.</p>\n<p>@param nodeClass the class of the node to be returned\n@return the node of the given type that encloses this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getAncestor","static":false,"abstract":false,"constant":false,"return":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"parameters":{"predicate":{"name":"predicate","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/java-engine.Predicate","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getProperty":{"name":"getProperty","qualifiedName":"analyzer/analyzer.ImportDirective.getProperty","comment":"<p>Return the value of the property with the given name, or <code>null</code> if this node does not\nhave a property with the given name.</p>\n<p>@return the value of the property with the given name</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.getProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/analyzer.ImportDirective.noSuchMethod","comment":"<p><a>analyzer/analyzer.ImportDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/analyzer.ImportDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/analyzer.ImportDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/analyzer.ImportDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"safelyVisitChild":{"name":"safelyVisitChild","qualifiedName":"analyzer/analyzer.ImportDirective.safelyVisitChild","comment":"<p>If the given child is not <code>null</code>, use the given visitor to visit it.</p>\n<p>@param child the child to be visited\n@param visitor the visitor that will be used to visit the child</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.safelyVisitChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"child":{"name":"child","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstNode","inner":[]}],"value":null,"annotations":[]},"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setProperty":{"name":"setProperty","qualifiedName":"analyzer/analyzer.ImportDirective.setProperty","comment":"<p>Set the value of the property with the given name to the given value. If the value is\n<code>null</code>, the property will effectively be removed.</p>\n<p>@param propertyName the name of the property whose value is to be set\n@param propertyValue the new value of the property</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.setProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"propertyName":{"name":"propertyName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"propertyValue":{"name":"propertyValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toSource":{"name":"toSource","qualifiedName":"analyzer/analyzer.ImportDirective.toSource","comment":"<p>Return a textual description of this node in a form approximating valid source. The returned\nstring will not be valid source primarily in the case where the node itself is not well-formed.</p>\n<p>@return the source code equivalent of this node</p>","commentFrom":"","inheritedFrom":"analyzer.AstNode.toSource","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/analyzer.ImportDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"analyzer.AstNode.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]},"visitChildren":{"name":"visitChildren","qualifiedName":"analyzer/analyzer.ImportDirective.visitChildren","comment":"","commentFrom":"","inheritedFrom":"analyzer.UriBasedDirective.visitChildren","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"visitor":{"name":"visitor","optional":false,"named":false,"default":false,"type":[{"outer":"analyzer/analyzer.AstVisitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"analyzer/dart-core.override","parameters":[]}]}}},"annotations":[],"generics":{}}