{"name":"CommandLineOptions","qualifiedName":"analyzer/options.CommandLineOptions","comment":"<p>Analyzer commandline configuration options.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"dartSdkPath":{"name":"dartSdkPath","qualifiedName":"analyzer/options.CommandLineOptions.dartSdkPath","comment":"<p>The path to the dart SDK</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"disableHints":{"name":"disableHints","qualifiedName":"analyzer/options.CommandLineOptions.disableHints","comment":"<p>Whether to report hints</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"displayVersion":{"name":"displayVersion","qualifiedName":"analyzer/options.CommandLineOptions.displayVersion","comment":"<p>Whether to display version information</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"ignoreUnrecognizedFlags":{"name":"ignoreUnrecognizedFlags","qualifiedName":"analyzer/options.CommandLineOptions.ignoreUnrecognizedFlags","comment":"<p>Whether to ignore unrecognized flags</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"log":{"name":"log","qualifiedName":"analyzer/options.CommandLineOptions.log","comment":"<p>Whether to log additional analysis messages and exceptions</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"machineFormat":{"name":"machineFormat","qualifiedName":"analyzer/options.CommandLineOptions.machineFormat","comment":"<p>Whether to use machine format for error display</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"packageRootPath":{"name":"packageRootPath","qualifiedName":"analyzer/options.CommandLineOptions.packageRootPath","comment":"<p>The path to the package root</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"perf":{"name":"perf","qualifiedName":"analyzer/options.CommandLineOptions.perf","comment":"<p>Whether to show performance statistics</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"shouldBatch":{"name":"shouldBatch","qualifiedName":"analyzer/options.CommandLineOptions.shouldBatch","comment":"<p>Batch mode (for unit testing)</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"showPackageWarnings":{"name":"showPackageWarnings","qualifiedName":"analyzer/options.CommandLineOptions.showPackageWarnings","comment":"<p>Whether to show package: warnings</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"showSdkWarnings":{"name":"showSdkWarnings","qualifiedName":"analyzer/options.CommandLineOptions.showSdkWarnings","comment":"<p>Whether to show SDK warnings</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"sourceFiles":{"name":"sourceFiles","qualifiedName":"analyzer/options.CommandLineOptions.sourceFiles","comment":"<p>The source files to analyze</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"warmPerf":{"name":"warmPerf","qualifiedName":"analyzer/options.CommandLineOptions.warmPerf","comment":"<p>Whether to show both cold and hot performance statistics</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"warningsAreFatal":{"name":"warningsAreFatal","qualifiedName":"analyzer/options.CommandLineOptions.warningsAreFatal","comment":"<p>Whether to treat warnings as fatal</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"parse":{"name":"parse","qualifiedName":"analyzer/options.CommandLineOptions.parse","comment":"<p>Parse <a>analyzer/options.CommandLineOptions.parse.args</a> into <a>analyzer/options.CommandLineOptions</a> describing the specified\nanalyzer options. In case of a format error, prints error and exists.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"analyzer/options.CommandLineOptions","inner":[]}],"parameters":{"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"analyzer/options.CommandLineOptions.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>analyzer/options.CommandLineOptions.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"analyzer/options.CommandLineOptions.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"analyzer/options.CommandLineOptions.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>analyzer/options.CommandLineOptions.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>analyzer/options.CommandLineOptions.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"analyzer/options.CommandLineOptions.noSuchMethod","comment":"<p><a>analyzer/options.CommandLineOptions.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>analyzer/options.CommandLineOptions.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>analyzer/options.CommandLineOptions.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>analyzer/options.CommandLineOptions.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"analyzer/options.CommandLineOptions.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}