{"name":"InputBuffer","qualifiedName":"image/image.InputBuffer","comment":"<p>A buffer that can be read as a stream of bytes.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"bigEndian":{"name":"bigEndian","qualifiedName":"image/image.InputBuffer.bigEndian","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"buffer":{"name":"buffer","qualifiedName":"image/image.InputBuffer.buffer","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"end":{"name":"end","qualifiedName":"image/image.InputBuffer.end","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"offset":{"name":"offset","qualifiedName":"image/image.InputBuffer.offset","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"start":{"name":"start","qualifiedName":"image/image.InputBuffer.start","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isEOS":{"name":"isEOS","qualifiedName":"image/image.InputBuffer.isEOS","comment":"<p>Is the current position at the end of the stream?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"image/image.InputBuffer.length","comment":"<p>How many bytes are left in the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"position":{"name":"position","qualifiedName":"image/image.InputBuffer.position","comment":"<p>The current read position relative to the start of the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"image/image.InputBuffer.InputBuffer-","comment":"<p>Create a InputStream for reading from a List&lt;int></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"buffer":{"name":"buffer","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"bigEndian":{"name":"bigEndian","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"from":{"name":"from","qualifiedName":"image/image.InputBuffer.InputBuffer-from","comment":"<p>Create a copy of <a>image/image.InputBuffer.InputBuffer-from.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.InputBuffer","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"image/image.InputBuffer.[]","comment":"<p>Access the buffer relative from the current position.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"image/image.InputBuffer.[]=","comment":"<p>Set a buffer element relative to the current position.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"indexOf":{"name":"indexOf","qualifiedName":"image/image.InputBuffer.indexOf","comment":"<p>Returns the position of the given <a>image/image.InputBuffer.indexOf.value</a> within the buffer, starting\nfrom the current read position with the given <a>image/image.InputBuffer.indexOf.offset</a>.  The position\nreturned is relative to the start of the buffer, or -1 if the <a>image/image.InputBuffer.indexOf.value</a>\nwas not found.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"memcpy":{"name":"memcpy","qualifiedName":"image/image.InputBuffer.memcpy","comment":"<p>Copy data from <a>image/image.InputBuffer.memcpy.other</a> to this buffer, at <a>image/image.InputBuffer.memcpy.start</a> offset from the\ncurrent read position, and <a>image/image.InputBuffer.memcpy.length</a> number of bytes.  <a>image/image.InputBuffer.memcpy.offset</a> is\nthe offset in <a>image/image.InputBuffer.memcpy.other</a> to start reading.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"memset":{"name":"memset","qualifiedName":"image/image.InputBuffer.memset","comment":"<p>Set a range of bytes in this buffer to <a>image/image.InputBuffer.memset.value</a>, at <a>image/image.InputBuffer.memset.start</a> offset from the\ncurrent read poisiton, and <a>image/image.InputBuffer.memset.length</a> number of bytes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"length":{"name":"length","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"peekBytes":{"name":"peekBytes","qualifiedName":"image/image.InputBuffer.peekBytes","comment":"<p>Read <a>image/image.InputBuffer.peekBytes.count</a> bytes from an <a>image/image.InputBuffer.peekBytes.offset</a> of the current read position, without\nmoving the read position.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.InputBuffer","inner":[]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"readByte":{"name":"readByte","qualifiedName":"image/image.InputBuffer.readByte","comment":"<p>Read a single byte.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readBytes":{"name":"readBytes","qualifiedName":"image/image.InputBuffer.readBytes","comment":"<p>Read <a>image/image.InputBuffer.readBytes.count</a> bytes from the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.InputBuffer","inner":[]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readFloat32":{"name":"readFloat32","qualifiedName":"image/image.InputBuffer.readFloat32","comment":"<p>Read a 32-bit float.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"readInt16":{"name":"readInt16","qualifiedName":"image/image.InputBuffer.readInt16","comment":"<p>Read a 16-bit word from the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readInt32":{"name":"readInt32","qualifiedName":"image/image.InputBuffer.readInt32","comment":"<p>Read a signed 32-bit integer from the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readInt8":{"name":"readInt8","qualifiedName":"image/image.InputBuffer.readInt8","comment":"","commentFrom":"image.InputBuffer.readInt8","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readString":{"name":"readString","qualifiedName":"image/image.InputBuffer.readString","comment":"<p>Read a null-terminated string, or if <a>image/image.InputBuffer.readString.len</a> is provided, that number of\nbytes returned as a string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"len":{"name":"len","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readUint16":{"name":"readUint16","qualifiedName":"image/image.InputBuffer.readUint16","comment":"<p>Read a 16-bit word from the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readUint24":{"name":"readUint24","qualifiedName":"image/image.InputBuffer.readUint24","comment":"<p>Read a 24-bit word from the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readUint32":{"name":"readUint32","qualifiedName":"image/image.InputBuffer.readUint32","comment":"<p>Read a 32-bit word from the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"readUint64":{"name":"readUint64","qualifiedName":"image/image.InputBuffer.readUint64","comment":"<p>Read a 64-bit word form the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"rewind":{"name":"rewind","qualifiedName":"image/image.InputBuffer.rewind","comment":"<p>Reset to the beginning of the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"skip":{"name":"skip","qualifiedName":"image/image.InputBuffer.skip","comment":"<p>Move the read position by <a>image/image.InputBuffer.skip.count</a> bytes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"subset":{"name":"subset","qualifiedName":"image/image.InputBuffer.subset","comment":"<p>Return a InputStream to read a subset of this stream.  It does not\nmove the read position of this stream.  <a>image/image.InputBuffer.subset.position</a> is specified relative\nto the start of the buffer.  If <a>image/image.InputBuffer.subset.position</a> is not specified, the current\nread position is used. If <a>image/image.InputBuffer.length</a> is not specified, the remainder of this\nstream is used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.InputBuffer","inner":[]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"position":{"name":"position","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"offset":{"name":"offset","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"image/image.InputBuffer.toList","comment":"","commentFrom":"image.InputBuffer.toList","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"toUint32List":{"name":"toUint32List","qualifiedName":"image/image.InputBuffer.toUint32List","comment":"","commentFrom":"image.InputBuffer.toUint32List","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Uint32List","inner":[]}],"parameters":{"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"toUint8List":{"name":"toUint8List","qualifiedName":"image/image.InputBuffer.toUint8List","comment":"","commentFrom":"image.InputBuffer.toUint8List","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"parameters":{"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"image/image.InputBuffer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>image/image.InputBuffer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"image/image.InputBuffer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"image/image.InputBuffer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>image/image.InputBuffer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>image/image.InputBuffer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"image/image.InputBuffer.noSuchMethod","comment":"<p><a>image/image.InputBuffer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>image/image.InputBuffer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>image/image.InputBuffer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>image/image.InputBuffer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"image/image.InputBuffer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}