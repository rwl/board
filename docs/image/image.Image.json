{"name":"Image","qualifiedName":"image/image.Image","comment":"<p>A 32-bit image buffer where pixels are encoded into 32-bit unsigned ints.\nYou can use the methods in color to encode/decode the RGBA channels of a\ncolor for a pixel.</p>\n<p>Pixels are stored in 32-bit unsigned integers in aabbggrr format.\nThis is to be consistent with HTML canvas data.  You can use\n<a>image/image.Image.getBytes</a> to access the pixel at the byte (channel) level, where there\nare four bytes per pixel in red, green, blue, and alpha order.</p>\n<p>If this image is a frame of an animation as decoded by the decodeFrame\nmethod of <a>image/image.Decoder</a>, then the <a>image/image.Image.xOffset</a>, <a>image/image.Image.yOffset</a>, <a>image/image.Image.width</a> and <a>image/image.Image.height</a>\ncoordinates determine area of the canvas this image should be drawn into,\nas some frames of an animation only modify part of the canvas (recording\nthe part of the frame that actually changes).  The <a>image/image.decodeAnimation</a> method\nwill always return the fully composed animation, so these coordinate\nproperties are not used.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"BLEND_OVER":{"name":"BLEND_OVER","qualifiedName":"image/image.Image.BLEND_OVER","comment":"<p>Alpha blending should be used when drawing this frame (composited over\nthe current canvas image).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BLEND_SOURCE":{"name":"BLEND_SOURCE","qualifiedName":"image/image.Image.BLEND_SOURCE","comment":"<p>No alpha blending should be done when drawing this frame (replace\npixels in canvas).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"DISPOSE_CLEAR":{"name":"DISPOSE_CLEAR","qualifiedName":"image/image.Image.DISPOSE_CLEAR","comment":"<p>When drawing this frame, the canvas should be cleared first.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"DISPOSE_NONE":{"name":"DISPOSE_NONE","qualifiedName":"image/image.Image.DISPOSE_NONE","comment":"<p>When drawing this frame, the canvas should be left as it is.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"RGB":{"name":"RGB","qualifiedName":"image/image.Image.RGB","comment":"<p>24-bit RGB image.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"RGBA":{"name":"RGBA","qualifiedName":"image/image.Image.RGBA","comment":"<p>32-bit RGBA image.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"blendMethod":{"name":"blendMethod","qualifiedName":"image/image.Image.blendMethod","comment":"<p>Defines the blending method (alpha compositing) to use when drawing this\nframe.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"data":{"name":"data","qualifiedName":"image/image.Image.data","comment":"<p>Pixels are encoded into 4-byte integers, where each byte is an RGBA\nchannel.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-typed_data.Uint32List","inner":[]}],"annotations":[]},"disposeMethod":{"name":"disposeMethod","qualifiedName":"image/image.Image.disposeMethod","comment":"<p>Defines what should be done to the canvas when drawing this frame.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"duration":{"name":"duration","qualifiedName":"image/image.Image.duration","comment":"<p>How long this frame should be displayed, in milliseconds.\nA duration of 0 indicates no delay and the next frame will be drawn\nas quickly as it can.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"height":{"name":"height","qualifiedName":"image/image.Image.height","comment":"<p>Height of the image.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"width":{"name":"width","qualifiedName":"image/image.Image.width","comment":"<p>Width of the image.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"xOffset":{"name":"xOffset","qualifiedName":"image/image.Image.xOffset","comment":"<p>x position at which to render the frame.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"yOffset":{"name":"yOffset","qualifiedName":"image/image.Image.yOffset","comment":"<p>y position at which to render the frame.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"format=":{"name":"format=","qualifiedName":"image/image.Image.format=","comment":"<p>Set the format of the image, either <a>image/image.Image.RGB</a> or <a>image/image.Image.RGBA</a>.  The format is used\nfor informational purposes and has no effect on the actual stored data,\nwhich is always in 4-byte RGBA format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"format":{"name":"format","qualifiedName":"image/image.Image.format","comment":"<p>Get the format of the image, either <a>image/image.Image.RGB</a> or <a>image/image.Image.RGBA</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"image/image.Image.length","comment":"<p>The size of the image buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"numChannels":{"name":"numChannels","qualifiedName":"image/image.Image.numChannels","comment":"<p>How many color channels does the image have, 3 or 4?\nNote that internally, images always have 4 8-bit channels.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"image/image.Image.Image-","comment":"<p>Create an image with the given dimensions and format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"_format":{"name":"_format","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4","annotations":[]}},"annotations":[]},"from":{"name":"from","qualifiedName":"image/image.Image.Image-from","comment":"<p>Create a copy of the image <a>image/image.Image.Image-from.other</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromBytes":{"name":"fromBytes","qualifiedName":"image/image.Image.Image-fromBytes","comment":"<p>Create an image from <a>image/image.Image.Image-fromBytes.bytes</a>.</p>\n<p><a>image/image.Image.Image-fromBytes.bytes</a> should be in RGB&lt;A> format with a byte 0,255 for each channel.\nThe length of <a>image/image.Image.Image-fromBytes.bytes</a> should be &lt;3|4> * (width * height).\n<a>image/image.Image.format</a> determines if there are 3 or 4 channels per pixel.</p>\n<p>For example, given an Html Canvas, you could create an image:\nvar bytes = canvas.getContext('2d').getImageData(0, 0,\n  canvas.width, canvas.height).data;\nImage image = new Image.fromBytes(canvas.width, canvas.height, bytes);</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"_format":{"name":"_format","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4","annotations":[]}},"annotations":[]}},"operators":{"%":{"name":"%","qualifiedName":"image/image.Image.%","comment":"<p>Modula the colors of <a>image/image.Image.%.other</a> with the pixels of this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"&":{"name":"&","qualifiedName":"image/image.Image.&","comment":"<p>AND the colors of <a>image/image.Image.&.other</a> with the pixels of this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"*":{"name":"*","qualifiedName":"image/image.Image.*","comment":"<p>Multiply the colors of <a>image/image.Image.*.other</a> with the pixels of this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"image/image.Image.+","comment":"<p>Add the colors of <a>image/image.Image.+.other</a> to the pixels of this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"image/image.Image.-","comment":"<p>Subtract the colors of <a>image/image.Image.-.other</a> from the pixels of this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"image/image.Image.[]","comment":"<p>Get a pixel from the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"image/image.Image.[]=","comment":"<p>Set a pixel in the buffer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"|":{"name":"|","qualifiedName":"image/image.Image.|","comment":"<p>OR the colors of <a>image/image.Image.|.other</a> to the pixels of this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"boundsSafe":{"name":"boundsSafe","qualifiedName":"image/image.Image.boundsSafe","comment":"<p>Is the given pixel coordinates within the resolution of the image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"clone":{"name":"clone","qualifiedName":"image/image.Image.clone","comment":"<p>Clone this image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{},"annotations":[]},"fill":{"name":"fill","qualifiedName":"image/image.Image.fill","comment":"<p>Set all of the pixels of the image to the given <a>image/image.Image.fill.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getBytes":{"name":"getBytes","qualifiedName":"image/image.Image.getBytes","comment":"<p>Get the RGBA bytes from the image.  You can use this to access the\nRGBA color channels directly, or to pass it to something like an\nHtml canvas context.</p>\n<p>For example, given an Html Canvas, you could draw this image into the\ncanvas:\nHtml.ImageData d = context2D.createImageData(image.width, image.height);\nd.data.setRange(0, image.length, image.getBytes());\ncontext2D.putImageData(data, 0, 0);</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"parameters":{},"annotations":[]},"getPixel":{"name":"getPixel","qualifiedName":"image/image.Image.getPixel","comment":"<p>Get the pixel from the given <a>image/image.Image.getPixel.x</a>, <a>image/image.Image.getPixel.y</a> coordinate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getPixelCubic":{"name":"getPixelCubic","qualifiedName":"image/image.Image.getPixelCubic","comment":"<p>Get the pixel using cubic interpolation for non-integer pixel\ncoordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"fx":{"name":"fx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"fy":{"name":"fy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getPixelInterpolate":{"name":"getPixelInterpolate","qualifiedName":"image/image.Image.getPixelInterpolate","comment":"<p>Get the pixel using the given <a>image/image.Image.getPixelInterpolate.interpolation</a> type for non-integer pixel\ncoordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"fx":{"name":"fx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"fy":{"name":"fy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"interpolation":{"name":"interpolation","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"getPixelLinear":{"name":"getPixelLinear","qualifiedName":"image/image.Image.getPixelLinear","comment":"<p>Get the pixel using linear interpolation for non-integer pixel\ncoordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"fx":{"name":"fx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"fy":{"name":"fy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"index":{"name":"index","qualifiedName":"image/image.Image.index","comment":"<p>Get the buffer index for the <a>image/image.Image.index.x</a>, <a>image/image.Image.index.y</a> pixel coordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setPixel":{"name":"setPixel","qualifiedName":"image/image.Image.setPixel","comment":"<p>Set the pixel at the given <a>image/image.Image.setPixel.x</a>, <a>image/image.Image.setPixel.y</a> coordinate to the <a>image/image.Image.setPixel.color</a>.</p>\n<p>This simply replaces the existing color, it does not do any alpha\nblending.  Use <a>image/image.drawPixel</a> for that.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setPixelRGBA":{"name":"setPixelRGBA","qualifiedName":"image/image.Image.setPixelRGBA","comment":"<p>Set the pixel at the given <a>image/image.Image.setPixelRGBA.x</a>, <a>image/image.Image.setPixelRGBA.y</a> coordinate to the color\n<a>image/image.Image.setPixelRGBA.r</a>, <a>image/image.Image.setPixelRGBA.g</a>, <a>image/image.Image.setPixelRGBA.b</a>, <a>image/image.Image.setPixelRGBA.a</a>.</p>\n<p>This simply replaces the existing color, it does not do any alpha\nblending.  Use <a>image/image.drawPixel</a> for that.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"255","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"image/image.Image.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>image/image.Image.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"image/image.Image.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"image/image.Image.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>image/image.Image.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>image/image.Image.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"image/image.Image.noSuchMethod","comment":"<p><a>image/image.Image.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>image/image.Image.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>image/image.Image.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>image/image.Image.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"image/image.Image.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}