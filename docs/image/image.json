{"name":"image","qualifiedName":"image/image","comment":"<p>The image library aims to provide server-side programs the ability to load,\nmanipulate, and save various image file formats.</p>","variables":{"ALPHA":{"name":"ALPHA","qualifiedName":"image/image.ALPHA","comment":"<p>Alpha channel of a color.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BLUE":{"name":"BLUE","qualifiedName":"image/image.BLUE","comment":"<p>Blue channel of a color.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"CUBIC":{"name":"CUBIC","qualifiedName":"image/image.CUBIC","comment":"<p>Cubic interpolation.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"FLIP_BOTH":{"name":"FLIP_BOTH","qualifiedName":"image/image.FLIP_BOTH","comment":"<p>Flip the image both horizontally and vertically.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"FLIP_HORIZONTAL":{"name":"FLIP_HORIZONTAL","qualifiedName":"image/image.FLIP_HORIZONTAL","comment":"<p>Flip the image horizontally.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"FLIP_VERTICAL":{"name":"FLIP_VERTICAL","qualifiedName":"image/image.FLIP_VERTICAL","comment":"<p>Flip the image vertically.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"GREEN":{"name":"GREEN","qualifiedName":"image/image.GREEN","comment":"<p>Green channel of a color.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LINEAR":{"name":"LINEAR","qualifiedName":"image/image.LINEAR","comment":"<p>Linear interpolation.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LUMINANCE":{"name":"LUMINANCE","qualifiedName":"image/image.LUMINANCE","comment":"<p>Luminance of a color.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NEAREST":{"name":"NEAREST","qualifiedName":"image/image.NEAREST","comment":"<p>Nearest interopolation.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NOISE_GAUSSIAN":{"name":"NOISE_GAUSSIAN","qualifiedName":"image/image.NOISE_GAUSSIAN","comment":"<p>Gaussian noise type used by <a>image/image.noise</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NOISE_POISSON":{"name":"NOISE_POISSON","qualifiedName":"image/image.NOISE_POISSON","comment":"<p>Poisson noise type used by <a>image/image.noise</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NOISE_RICE":{"name":"NOISE_RICE","qualifiedName":"image/image.NOISE_RICE","comment":"<p>Rice noise type used by <a>image/image.noise</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NOISE_SALT_PEPPER":{"name":"NOISE_SALT_PEPPER","qualifiedName":"image/image.NOISE_SALT_PEPPER","comment":"<p>Salt&amp;Pepper noise type used by <a>image/image.noise</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NOISE_UNIFORM":{"name":"NOISE_UNIFORM","qualifiedName":"image/image.NOISE_UNIFORM","comment":"<p>Uniform noise type used by <a>image/image.noise</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PIXELATE_AVERAGE":{"name":"PIXELATE_AVERAGE","qualifiedName":"image/image.PIXELATE_AVERAGE","comment":"<p>Use the average of the pixels within a block for the block color, used by\n<a>image/image.pixelate</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PIXELATE_UPPERLEFT":{"name":"PIXELATE_UPPERLEFT","qualifiedName":"image/image.PIXELATE_UPPERLEFT","comment":"<p>Use the top-left pixel of a block for the block color, used by <a>image/image.pixelate</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"RED":{"name":"RED","qualifiedName":"image/image.RED","comment":"<p>Red channel of a color.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_ALL":{"name":"TRIM_ALL","qualifiedName":"image/image.TRIM_ALL","comment":"<p>Trim all edges of the image,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_BOTTOM":{"name":"TRIM_BOTTOM","qualifiedName":"image/image.TRIM_BOTTOM","comment":"<p>Trim the image up from the bottom,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_BOTTOM_RIGHT_COLOR":{"name":"TRIM_BOTTOM_RIGHT_COLOR","qualifiedName":"image/image.TRIM_BOTTOM_RIGHT_COLOR","comment":"<p>Trim an image to the top-left and bottom-right most pixels that are not the\nsame as the bottom-right most pixel of the image,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_LEFT":{"name":"TRIM_LEFT","qualifiedName":"image/image.TRIM_LEFT","comment":"<p>Trim the left edge of the image,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_RIGHT":{"name":"TRIM_RIGHT","qualifiedName":"image/image.TRIM_RIGHT","comment":"<p>Trim the right edge of the image,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_TOP":{"name":"TRIM_TOP","qualifiedName":"image/image.TRIM_TOP","comment":"<p>Trim the image down from the top,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_TOP_LEFT_COLOR":{"name":"TRIM_TOP_LEFT_COLOR","qualifiedName":"image/image.TRIM_TOP_LEFT_COLOR","comment":"<p>Trim an image to the top-left and bottom-right most pixels that are not the\nsame as the top-left most pixel of the image,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TRIM_TRANSPARENT":{"name":"TRIM_TRANSPARENT","qualifiedName":"image/image.TRIM_TRANSPARENT","comment":"<p>Trim an image to the top-left and bottom-right most non-transparent pixels,\nused by <a>image/image.findTrim</a> and <a>image/image.trim</a>.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"arial_14":{"name":"arial_14","qualifiedName":"image/image.arial_14","comment":"<p>14px Arial font for use with <a>image/image.drawString</a> and <a>image/image.drawChar</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"image/image.BitmapFont","inner":[]}],"annotations":[]},"arial_24":{"name":"arial_24","qualifiedName":"image/image.arial_24","comment":"<p>24px Arial font for use with <a>image/image.drawString</a> and <a>image/image.drawChar</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"image/image.BitmapFont","inner":[]}],"annotations":[]},"arial_48":{"name":"arial_48","qualifiedName":"image/image.arial_48","comment":"<p>48px Arial font for use with <a>image/image.drawString</a> and <a>image/image.drawChar</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"image/image.BitmapFont","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"adjustColor":{"name":"adjustColor","qualifiedName":"image/image.adjustColor","comment":"<p>Adjust the color of the <a>image/image.adjustColor.src</a> image using varous color transformations.</p>\n<p><a>image/image.adjustColor.blacks</a> defines the black level of the image, as a color.</p>\n<p><a>image/image.adjustColor.whites</a> defines the white level of the image, as a color.</p>\n<p><a>image/image.adjustColor.mids</a> defines the mid level of hte image, as a color.</p>\n<p><a>image/image.adjustColor.contrast</a> increases (> 1) / decreases (&lt; 1) the contrast of the image by\npushing colors away/toward neutral gray, where at 0.0 the image is entirely\nneutral gray (0 contrast), 1.0, the image is not adjusted and > 1.0 the\nimage increases contrast.</p>\n<p><a>image/image.adjustColor.saturation</a> increases (> 1) / decreases (&lt; 1) the saturation of the image\nby pushing colors away/toward their grayscale value, where 0.0 is grayscale\nand 1.0 is the original image, and > 1.0 the image becomes more saturated.</p>\n<p><a>image/image.adjustColor.brightness</a> is a constant scalar of the image colors.  At 0 the image\nis black, 1.0 unmodified, and > 1.0 the image becomes brighter.</p>\n<p><a>image/image.adjustColor.gamma</a> is an exponental scalar of the image colors.  At &lt; 1.0 the image\nbecomes brighter, and > 1.0 the image becomes darker.  A <a>image/image.adjustColor.gamma</a> of 1/2.2\nwill convert the image colors to linear color space.</p>\n<p><a>image/image.adjustColor.exposure</a> is an exponental scalar of the image as rgb * pow(2, exposure).\nAt 0, the image is unmodified; as the exposure increases, the image\nbrightens.</p>\n<p><a>image/image.adjustColor.hue</a> shifts the hue component of the image colors in degrees.  A <a>image/image.adjustColor.hue</a> of\n0 will have no affect, and a <a>image/image.adjustColor.hue</a> of 45 will shift the hue of all colors\nby 45 degrees.</p>\n<p><a>image/image.adjustColor.amount</a> controls how much affect this filter has on the <a>image/image.adjustColor.src</a> image, where\n0.0 has no effect and 1.0 has full effect.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"blacks":{"name":"blacks","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"whites":{"name":"whites","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"mids":{"name":"mids","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"contrast":{"name":"contrast","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"saturation":{"name":"saturation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"brightness":{"name":"brightness","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"gamma":{"name":"gamma","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"exposure":{"name":"exposure","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"hue":{"name":"hue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"amount":{"name":"amount","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"alphaBlendColors":{"name":"alphaBlendColors","qualifiedName":"image/image.alphaBlendColors","comment":"<p>Returns a new color of <a>image/image.alphaBlendColors.src</a> alpha-blended onto <a>image/image.alphaBlendColors.dst</a>. The opacity of <a>image/image.alphaBlendColors.src</a>\nis additionally scaled by <a>image/image.alphaBlendColors.fraction</a> / 255.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"dst":{"name":"dst","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"fraction":{"name":"fraction","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"255","annotations":[]}},"annotations":[]},"brightness":{"name":"brightness","qualifiedName":"image/image.brightness","comment":"<p>Set the <a>image/image.brightness.brightness</a> level for the image <a>image/image.brightness.src</a>.</p>\n<p><a>image/image.brightness.brightness</a> is an offset that is added to the red, green, and blue channels\nof every pixel.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"brightness":{"name":"brightness","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bumpToNormal":{"name":"bumpToNormal","qualifiedName":"image/image.bumpToNormal","comment":"<p>Generate a normal map from a heightfield bump image.</p>\n<p>The red channel of the <a>image/image.bumpToNormal.src</a> image is used as an input, 0 represents a low\nheight and 1 a high value. The optional <a>image/image.bumpToNormal.strength</a> parameter allows to set\nthe strength of the normal image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"strength":{"name":"strength","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"2.0","annotations":[]}},"annotations":[]},"clipLine":{"name":"clipLine","qualifiedName":"image/image.clipLine","comment":"<p>Clip a line to a rectangle using the Cohen–Sutherland clipping algorithm.\n<a>image/image.clipLine.line</a> is a list of 4 ints &lt;x1, y1, x2, y2>.\n<a>image/image.clipLine.rect</a> is a list of 4 ints &lt;x1, y1, x2, y2>.\nResults are stored in <a>image/image.clipLine.line</a>.\nIf <a>image/image.clipLine.line</a> falls completely outside of <a>image/image.clipLine.rect</a>, false is returned, otherwise\ntrue is returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"line":{"name":"line","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"rect":{"name":"rect","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"cmykToRGB":{"name":"cmykToRGB","qualifiedName":"image/image.cmykToRGB","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"m":{"name":"m","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"k":{"name":"k","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"colorOffset":{"name":"colorOffset","qualifiedName":"image/image.colorOffset","comment":"<p>Add the <a>image/image.colorOffset.red</a>, <a>image/image.colorOffset.green</a>, <a>image/image.colorOffset.blue</a> and <a>image/image.colorOffset.alpha</a> values to the <a>image/image.colorOffset.src</a> image\ncolors, a per-channel brightness.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"red":{"name":"red","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"green":{"name":"green","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"blue":{"name":"blue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"alpha":{"name":"alpha","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"contrast":{"name":"contrast","qualifiedName":"image/image.contrast","comment":"<p>Set the <a>image/image.contrast.contrast</a> level for the image <a>image/image.contrast.src</a>.</p>\n<p><a>image/image.contrast.contrast</a> values below 100 will decrees the contrast of the image,\nand values above 100 will increase the contrast.  A contrast of of 100\nwill have no affect.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"contrast":{"name":"contrast","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"convolution":{"name":"convolution","qualifiedName":"image/image.convolution","comment":"<p>Apply a 3x3 convolution filter to the <a>image/image.convolution.src</a> image.  <a>image/image.convolution.filter</a> should be a\nlist of 9 doubles.</p>\n<p>The rgb channels will be divided by <a>image/image.convolution.filterDiv</a> and add <a>image/image.convolution.offset</a>, allowing\nfilters to normalize and offset the filtered pixel value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"filter":{"name":"filter","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":null,"annotations":[]},"filterDiv":{"name":"filterDiv","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"1.0","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0.0","annotations":[]}},"annotations":[]},"copyCrop":{"name":"copyCrop","qualifiedName":"image/image.copyCrop","comment":"<p>Returns a croped copy of <a>image/image.copyCrop.src</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"w":{"name":"w","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"h":{"name":"h","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"copyInto":{"name":"copyInto","qualifiedName":"image/image.copyInto","comment":"<p>Copies a rectangular portion of one image to another image. <a>image/image.copyInto.dst</a> is the\ndestination image, <a>image/image.copyInto.src</a> is the source image identifier.</p>\n<p>In other words, copyInto will take an rectangular area from src of\nwidth src_w and height src_h at position (src_x,src_y) and place it\nin a rectangular area of <a>image/image.copyInto.dst</a> of width dst_w and height dst_h at\nposition (dst_x,dst_y).</p>\n<p>If the source and destination coordinates and width and heights differ,\nappropriate stretching or shrinking of the image fragment will be performed.\nThe coordinates refer to the upper left corner. This function can be used to\ncopy regions within the same image (if <a>image/image.copyInto.dst</a> is the same as <a>image/image.copyInto.src</a>)\nbut if the regions overlap the results will be unpredictable.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"dst":{"name":"dst","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"dstX":{"name":"dstX","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"dstY":{"name":"dstY","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"srcX":{"name":"srcX","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"srcY":{"name":"srcY","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"srcW":{"name":"srcW","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"srcH":{"name":"srcH","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"blend":{"name":"blend","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"copyResize":{"name":"copyResize","qualifiedName":"image/image.copyResize","comment":"<p>Returns a resized copy of the <a>image/image.copyResize.src</a> image.\nIf <a>image/image.copyResize.height</a> is -1, then it will be determined by the aspect\nratio of <a>image/image.copyResize.src</a> and <a>image/image.copyResize.width</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"height":{"name":"height","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"-1","annotations":[]},"interpolation":{"name":"interpolation","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"copyRotate":{"name":"copyRotate","qualifiedName":"image/image.copyRotate","comment":"<p>Returns a copy of the <a>image/image.copyRotate.src</a> image, rotated by <a>image/image.copyRotate.angle</a> degrees.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"angle":{"name":"angle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"interpolation":{"name":"interpolation","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"crand":{"name":"crand","qualifiedName":"image/image.crand","comment":"<p>Return a random variable between -1,1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"rand":{"name":"rand","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeAnimation":{"name":"decodeAnimation","qualifiedName":"image/image.decodeAnimation","comment":"<p>Decode the given image file bytes by first identifying the format of the\nfile and using that decoder to decode the file into an <a>image/image.Animation</a>\ncontaining one or more <a>image/image.Image</a> frames.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Animation","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeExr":{"name":"decodeExr","qualifiedName":"image/image.decodeExr","comment":"<p>Decode an OpenEXR formatted image, tone-mapped using the\ngiven <a>image/image.decodeExr.exposure</a> to a low-dynamic-range <a>image/image.Image</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"exposure":{"name":"exposure","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"1.0","annotations":[]}},"annotations":[]},"decodeGif":{"name":"decodeGif","qualifiedName":"image/image.decodeGif","comment":"<p>Decode a GIF formatted image (first frame for animations).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeGifAnimation":{"name":"decodeGifAnimation","qualifiedName":"image/image.decodeGifAnimation","comment":"<p>Decode an animated GIF file.  If the gif isn't animated, the animation\nwill contain a single frame with the gif's image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Animation","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeImage":{"name":"decodeImage","qualifiedName":"image/image.decodeImage","comment":"<p>Decode the given image file bytes by first identifying the format of the\nfile and using that decoder to decode the file into a single frame <a>image/image.Image</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeJpg":{"name":"decodeJpg","qualifiedName":"image/image.decodeJpg","comment":"<p>Decode a JPG formatted image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeNamedAnimation":{"name":"decodeNamedAnimation","qualifiedName":"image/image.decodeNamedAnimation","comment":"<p>Identify the format of the image using the file extension of the given\n<a>image/image.decodeNamedAnimation.name</a>, and decode the given file <a>image/image.decodeNamedAnimation.bytes</a> to an <a>image/image.Animation</a> with one or more\n<a>image/image.Image</a> frames.  See also <a>image/image.decodeAnimation</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Animation","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeNamedImage":{"name":"decodeNamedImage","qualifiedName":"image/image.decodeNamedImage","comment":"<p>Identify the format of the image using the file extension of the given\n<a>image/image.decodeNamedImage.name</a>, and decode the given file <a>image/image.decodeNamedImage.bytes</a> to a single frame <a>image/image.Image</a>.  See\nalso <a>image/image.decodeImage</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodePng":{"name":"decodePng","qualifiedName":"image/image.decodePng","comment":"<p>Decode a PNG formatted image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodePngAnimation":{"name":"decodePngAnimation","qualifiedName":"image/image.decodePngAnimation","comment":"<p>Decode a PNG formatted animation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Animation","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodePsd":{"name":"decodePsd","qualifiedName":"image/image.decodePsd","comment":"<p>Decode a Photoshop PSD formatted image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeTga":{"name":"decodeTga","qualifiedName":"image/image.decodeTga","comment":"<p>Decode a Targa formatted image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeTiff":{"name":"decodeTiff","qualifiedName":"image/image.decodeTiff","comment":"<p>Decode a TIFF formatted image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeTiffAnimation":{"name":"decodeTiffAnimation","qualifiedName":"image/image.decodeTiffAnimation","comment":"<p>Decode an multi-image (animated) TIFF file.  If the tiff doesn't have\nmultiple images, the animation will contain a single frame with the tiff's\nimage.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Animation","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeWebP":{"name":"decodeWebP","qualifiedName":"image/image.decodeWebP","comment":"<p>Decode a WebP formatted image (first frame for animations).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decodeWebPAnimation":{"name":"decodeWebPAnimation","qualifiedName":"image/image.decodeWebPAnimation","comment":"<p>Decode an animated WebP file.  If the webp isn't animated, the animation\nwill contain a single frame with the webp's image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Animation","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"drawChar":{"name":"drawChar","qualifiedName":"image/image.drawChar","comment":"<p>Draw a single character from <a>image/image.drawChar.char</a> horizontally into <a>image/image.drawChar.image</a> at position\n<a>image/image.drawChar.x</a>,<a>image/image.drawChar.y</a> with the given <a>image/image.drawChar.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"font":{"name":"font","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.BitmapFont","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"char":{"name":"char","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4294967295","annotations":[]}},"annotations":[]},"drawCircle":{"name":"drawCircle","qualifiedName":"image/image.drawCircle","comment":"<p>Draw a circle into the <a>image/image.drawCircle.image</a> with a center of <a>image/image.drawCircle.x0</a>,<a>image/image.drawCircle.y0</a> and\nthe given <a>image/image.drawCircle.radius</a> and <a>image/image.drawCircle.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"x0":{"name":"x0","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y0":{"name":"y0","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"radius":{"name":"radius","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"drawLine":{"name":"drawLine","qualifiedName":"image/image.drawLine","comment":"<p>Draw a line into <a>image/image.drawLine.image</a>.</p>\n<p>If <a>image/image.drawLine.antialias</a> is true then the line is drawn with smooth edges.\n<a>image/image.drawLine.thickness</a> determines how thick the line should be drawn, in pixels.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"x1":{"name":"x1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y1":{"name":"y1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"x2":{"name":"x2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y2":{"name":"y2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"antialias":{"name":"antialias","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"thickness":{"name":"thickness","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"drawPixel":{"name":"drawPixel","qualifiedName":"image/image.drawPixel","comment":"<p>Draw a single pixel into the image, applying alpha and opacity blending.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"opacity":{"name":"opacity","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"255","annotations":[]}},"annotations":[]},"drawRect":{"name":"drawRect","qualifiedName":"image/image.drawRect","comment":"<p>Draw a rectangle in the image <a>image/image.drawRect.src</a> with the <a>image/image.drawRect.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"x1":{"name":"x1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y1":{"name":"y1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"x2":{"name":"x2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y2":{"name":"y2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"drawString":{"name":"drawString","qualifiedName":"image/image.drawString","comment":"<p>Draw a string horizontally into <a>image/image.drawString.image</a> horizontally into <a>image/image.drawString.image</a> at position\n<a>image/image.drawString.x</a>,<a>image/image.drawString.y</a> with the given <a>image/image.drawString.color</a>.</p>\n<p>You can load your own font, or use one of the existing ones\nsuch as: <a>image/image.arial_14</a>, <a>image/image.arial_24</a>, or <a>image/image.arial_48</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"font":{"name":"font","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.BitmapFont","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"4294967295","annotations":[]}},"annotations":[]},"dropShadow":{"name":"dropShadow","qualifiedName":"image/image.dropShadow","comment":"<p>Create a drop-shadow effect for the image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"hShadow":{"name":"hShadow","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"vShadow":{"name":"vShadow","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"blur":{"name":"blur","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"shadowColor":{"name":"shadowColor","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"2684354560","annotations":[]}},"annotations":[]},"emboss":{"name":"emboss","qualifiedName":"image/image.emboss","comment":"<p>Apply an emboss convolution filter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeGif":{"name":"encodeGif","qualifiedName":"image/image.encodeGif","comment":"<p>Encode an image to the GIF format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeGifAnimation":{"name":"encodeGifAnimation","qualifiedName":"image/image.encodeGifAnimation","comment":"<p>Encode an animation to the GIF format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"anim":{"name":"anim","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Animation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeJpg":{"name":"encodeJpg","qualifiedName":"image/image.encodeJpg","comment":"<p>Encode an image to the JPEG format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"quality":{"name":"quality","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"100","annotations":[]}},"annotations":[]},"encodeNamedImage":{"name":"encodeNamedImage","qualifiedName":"image/image.encodeNamedImage","comment":"<p>Identify the format of the image and encode it with the appropriate\n<a>image/image.Encoder</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodePng":{"name":"encodePng","qualifiedName":"image/image.encodePng","comment":"<p>Encode an image to the PNG format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"level":{"name":"level","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"6","annotations":[]}},"annotations":[]},"encodeTga":{"name":"encodeTga","qualifiedName":"image/image.encodeTga","comment":"<p>Encode an image to the Targa format.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fill":{"name":"fill","qualifiedName":"image/image.fill","comment":"<p>Set all of the pixels of an <a>image/image.fill.image</a> to the given <a>image/image.fill.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fillRect":{"name":"fillRect","qualifiedName":"image/image.fillRect","comment":"<p>Fill a rectangle in the image <a>image/image.fillRect.src</a> with the given <a>image/image.fillRect.color</a> with the corners\n<a>image/image.fillRect.x1</a>,<a>image/image.fillRect.y1</a> and <a>image/image.fillRect.x2</a>,<a>image/image.fillRect.y2</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"x1":{"name":"x1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y1":{"name":"y1","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"x2":{"name":"x2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"y2":{"name":"y2","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"findDecoderForData":{"name":"findDecoderForData","qualifiedName":"image/image.findDecoderForData","comment":"<p>Find a <a>image/image.Decoder</a> that is able to decode the given image <a>image/image.findDecoderForData.data</a>.\nUse this is you don't know the type of image it is.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Decoder","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"findTrim":{"name":"findTrim","qualifiedName":"image/image.findTrim","comment":"<p>Find the crop area to be used by the trim function. Returns the\ncoordinates as x, y, width, height. You could pass these coordinates\nto the <a>image/image.copyCrop</a> function to crop the image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"mode":{"name":"mode","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"sides":{"name":"sides","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"15","annotations":[]}},"annotations":[]},"flip":{"name":"flip","qualifiedName":"image/image.flip","comment":"<p>Flips the <a>image/image.flip.src</a> image using the given <a>image/image.flip.mode</a>, which can be one of:\n<a>image/image.FLIP_HORIZONTAL</a>, <a>image/image.FLIP_VERTICAL</a>, or <a>image/image.FLIP_BOTH</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"mode":{"name":"mode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"flipHorizontal":{"name":"flipHorizontal","qualifiedName":"image/image.flipHorizontal","comment":"<p>Flip the src image horizontally.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"flipVertical":{"name":"flipVertical","qualifiedName":"image/image.flipVertical","comment":"<p>Flip the <a>image/image.flipVertical.src</a> image vertically.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"gaussianBlur":{"name":"gaussianBlur","qualifiedName":"image/image.gaussianBlur","comment":"<p>Apply gaussian blur to the <a>image/image.gaussianBlur.src</a> image.  <a>image/image.gaussianBlur.radius</a> determines how many pixels\naway from the current pixel should contribute to the blur, where 0 is no\nblur and the larger the radius, the stronger the blur.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"radius":{"name":"radius","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAlpha":{"name":"getAlpha","qualifiedName":"image/image.getAlpha","comment":"<p>Get the alpha channel from the <a>image/image.getAlpha.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getBlue":{"name":"getBlue","qualifiedName":"image/image.getBlue","comment":"<p>Get the blue channel from the <a>image/image.getBlue.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getChannel":{"name":"getChannel","qualifiedName":"image/image.getChannel","comment":"<p>Get the <a>image/image.getChannel.channel</a> from the <a>image/image.getChannel.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"channel":{"name":"channel","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getColor":{"name":"getColor","qualifiedName":"image/image.getColor","comment":"<p>Get the color with the given <a>image/image.getColor.r</a>, <a>image/image.getColor.g</a>, <a>image/image.getColor.b</a>, and <a>image/image.getColor.a</a> components.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"255","annotations":[]}},"annotations":[]},"getDecoderForNamedImage":{"name":"getDecoderForNamedImage","qualifiedName":"image/image.getDecoderForNamedImage","comment":"<p>Return the <a>image/image.Decoder</a> that can decode image with the given <a>image/image.getDecoderForNamedImage.name</a>,\nby looking at the file extension.  See also <a>image/image.findDecoderForData</a> to\ndetermine the decoder to use given the bytes of the file.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Decoder","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getGreen":{"name":"getGreen","qualifiedName":"image/image.getGreen","comment":"<p>Get the green channel from the <a>image/image.getGreen.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLuminance":{"name":"getLuminance","qualifiedName":"image/image.getLuminance","comment":"<p>Returns the luminance (grayscale) value of the <a>image/image.getLuminance.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLuminanceRGB":{"name":"getLuminanceRGB","qualifiedName":"image/image.getLuminanceRGB","comment":"<p>Returns the luminance (grayscale) value of the color.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getRed":{"name":"getRed","qualifiedName":"image/image.getRed","comment":"<p>Get the red channel from the <a>image/image.getRed.color</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"grand":{"name":"grand","qualifiedName":"image/image.grand","comment":"<p>Return a random variable following a gaussian distribution and a standard\ndeviation of 1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"rand":{"name":"rand","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"grayscale":{"name":"grayscale","qualifiedName":"image/image.grayscale","comment":"<p>Convert the image to grayscale.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"hdrBloom":{"name":"hdrBloom","qualifiedName":"image/image.hdrBloom","comment":"<p>Applies an HDR bloom filter to the image, in-place.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.HdrImage","inner":[]}],"parameters":{"hdr":{"name":"hdr","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.HdrImage","inner":[]}],"value":null,"annotations":[]},"radius":{"name":"radius","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.01","annotations":[]},"weight":{"name":"weight","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.1","annotations":[]}},"annotations":[]},"hdrGamma":{"name":"hdrGamma","qualifiedName":"image/image.hdrGamma","comment":"<p>Apply gamma scaling to the HDR image, in-place.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.HdrImage","inner":[]}],"parameters":{"hdr":{"name":"hdr","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.HdrImage","inner":[]}],"value":null,"annotations":[]},"gamma":{"name":"gamma","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"2.2","annotations":[]}},"annotations":[]},"hdrToImage":{"name":"hdrToImage","qualifiedName":"image/image.hdrToImage","comment":"<p>Convert a high dynamic range image to a low dynamic range image,\nwith optional exposure control.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"hdr":{"name":"hdr","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.HdrImage","inner":[]}],"value":null,"annotations":[]},"exposure":{"name":"exposure","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"invert":{"name":"invert","qualifiedName":"image/image.invert","comment":"<p>Invert the colors of the <a>image/image.invert.src</a> image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"labToRGB":{"name":"labToRGB","qualifiedName":"image/image.labToRGB","comment":"<p>Convert Lab color to RGB.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"l":{"name":"l","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"labToXYZ":{"name":"labToXYZ","qualifiedName":"image/image.labToXYZ","comment":"<p>Convert Lab color to XYZ.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"l":{"name":"l","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"minMax":{"name":"minMax","qualifiedName":"image/image.minMax","comment":"<p>Find the minimum and maximum color value in the image.\nReturns a list as &lt;min, max>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noise":{"name":"noise","qualifiedName":"image/image.noise","comment":"<p>Add random noise to pixel values.  <a>image/image.noise.sigma</a> determines how strong the effect\nshould be.  <a>image/image.noise.type</a> should be one of the following: <a>image/image.NOISE_GAUSSIAN</a>,\n<a>image/image.NOISE_UNIFORM</a>, [NOISE_SALT_PEPPER], <a>image/image.NOISE_POISSON</a>, or <a>image/image.NOISE_RICE</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"sigma":{"name":"sigma","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"random":{"name":"random","optional":true,"named":true,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"normalize":{"name":"normalize","qualifiedName":"image/image.normalize","comment":"<p>Linearly normalize the colors of the image.  All color values will be mapped\nto the range <a>image/image.normalize.minValue</a>, <a>image/image.normalize.maxValue</a> inclusive.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"minValue":{"name":"minValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"maxValue":{"name":"maxValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pixelate":{"name":"pixelate","qualifiedName":"image/image.pixelate","comment":"<p>Pixelate the <a>image/image.pixelate.src</a> image.</p>\n<p><a>image/image.pixelate.blockSize</a> determines the size of the pixelated blocks.\nIf <a>image/image.pixelate.mode</a> is <a>image/image.PIXELATE_UPPERLEFT</a> then the upper-left corner of the block\nwill be used for the block color. Otherwise if <a>image/image.pixelate.mode</a> is <a>image/image.PIXELATE_AVERAGE</a>,\nthe average of all the pixels in the block will be used for the block color.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"blockSize":{"name":"blockSize","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"mode":{"name":"mode","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"prand":{"name":"prand","qualifiedName":"image/image.prand","comment":"<p>Return a random variable following a Poisson distribution of parameter <a>image/image.prand.z</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"rand":{"name":"rand","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]},"z":{"name":"z","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"quantize":{"name":"quantize","qualifiedName":"image/image.quantize","comment":"<p>Quantize the number of colors in image to 256.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readFont":{"name":"readFont","qualifiedName":"image/image.readFont","comment":"<p>Decode a <a>image/image.BitmapFont</a> from the contents of <a>image/image.readFont.font</a> definition (.fnt) file,\nand an <a>image/image.Image</a> that stores the font <a>image/image.readFont.map</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.BitmapFont","inner":[]}],"parameters":{"font":{"name":"font","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readFontZip":{"name":"readFontZip","qualifiedName":"image/image.readFontZip","comment":"<p>Decode a <a>image/image.BitmapFont</a> from the contents of a zip file that stores the\n.fnt font definition and associated PNG images.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.BitmapFont","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"readJpg":{"name":"readJpg","qualifiedName":"image/image.readJpg","comment":"<p>Renamed to <a>image/image.decodeJpg</a>, left for backward compatibility.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"readPng":{"name":"readPng","qualifiedName":"image/image.readPng","comment":"<p>Renamed to <a>image/image.decodePng</a>, left for backward compatibility.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"readTga":{"name":"readTga","qualifiedName":"image/image.readTga","comment":"<p>Renamed to <a>image/image.decodeTga</a>, left for backward compatibility.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"reinhardToneMap":{"name":"reinhardToneMap","qualifiedName":"image/image.reinhardToneMap","comment":"<p>Applies Reinhard tone mapping to the hdr image, in-place.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.HdrImage","inner":[]}],"parameters":{"hdr":{"name":"hdr","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.HdrImage","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remapColors":{"name":"remapColors","qualifiedName":"image/image.remapColors","comment":"<p>Remap the color channels of the image.\n<a>image/image.remapColors.red</a>, <a>image/image.remapColors.green</a>, <a>image/image.remapColors.blue</a> and <a>image/image.remapColors.alpha</a> should be set to one of the following:\n<a>image/image.RED</a>, <a>image/image.GREEN</a>, <a>image/image.BLUE</a> or <a>image/image.ALPHA</a>.  For example,\nremapColors(src, red: GREEN, green: RED);\nwill swap the red and green channels of the image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"red":{"name":"red","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"green":{"name":"green","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]},"blue":{"name":"blue","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"2","annotations":[]},"alpha":{"name":"alpha","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"3","annotations":[]}},"annotations":[]},"scaleRGBA":{"name":"scaleRGBA","qualifiedName":"image/image.scaleRGBA","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"seperableConvolution":{"name":"seperableConvolution","qualifiedName":"image/image.seperableConvolution","comment":"<p>Apply a generic seperable convolution filter the <a>image/image.seperableConvolution.src</a> image, using the\ngiven <a>image/image.seperableConvolution.kernel</a>.</p>\n<p><a>image/image.gaussianBlur</a> is an example of such a filter.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"kernel":{"name":"kernel","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.SeperableKernel","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sepia":{"name":"sepia","qualifiedName":"image/image.sepia","comment":"<p>Apply sepia tone to the image.</p>\n<p><a>image/image.sepia.amount</a> controls the strength of the effect, in the range 0.0 - 1.0.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"amount":{"name":"amount","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"1.0","annotations":[]}},"annotations":[]},"setAlpha":{"name":"setAlpha","qualifiedName":"image/image.setAlpha","comment":"<p>Returns a new color where the alpha channel of <a>image/image.setAlpha.color</a> has been replaced\nby <a>image/image.setAlpha.value</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setBlue":{"name":"setBlue","qualifiedName":"image/image.setBlue","comment":"<p>Returns a new color where the blue channel of <a>image/image.setBlue.color</a> has been replaced\nby <a>image/image.setBlue.value</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setChannel":{"name":"setChannel","qualifiedName":"image/image.setChannel","comment":"<p>Returns a new color, where the given <a>image/image.setChannel.color</a>'s <a>image/image.setChannel.channel</a> has been\nreplaced with the given <a>image/image.setChannel.value</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"channel":{"name":"channel","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setGreen":{"name":"setGreen","qualifiedName":"image/image.setGreen","comment":"<p>Returns a new color where the green channel of <a>image/image.setGreen.color</a> has been replaced\nby <a>image/image.setGreen.value</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setRed":{"name":"setRed","qualifiedName":"image/image.setRed","comment":"<p>Returns a new color where the red channel of <a>image/image.setRed.color</a> has been replaced\nby <a>image/image.setRed.value</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"color":{"name":"color","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"smooth":{"name":"smooth","qualifiedName":"image/image.smooth","comment":"<p>Apply a smoothing convolution filter to the <a>image/image.smooth.src</a> image.</p>\n<p><a>image/image.smooth.w</a> is the weight of the current pixel being filtered.  If it's greater than\n1.0, it will make the image sharper.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"w":{"name":"w","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sobel":{"name":"sobel","qualifiedName":"image/image.sobel","comment":"<p>Apply Sobe edge detection filtering to the <a>image/image.sobel.src</a> Image.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"amount":{"name":"amount","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"1.0","annotations":[]}},"annotations":[]},"trim":{"name":"trim","qualifiedName":"image/image.trim","comment":"<p>Automatically crops the image by finding the corners of the image that\nmeet the <a>image/image.trim.mode</a> criteria (not transparent or a different color).</p>\n<p><a>image/image.trim.mode</a> can be either <a>image/image.TRIM_TRANSPARENT</a>, [TRIM_TOP_LEFT_CORNER] or\n[TRIM_BOTTOM_RIGHT_CORNER].</p>\n<p><a>image/image.trim.sides</a> can be used to control which sides of the image get trimmed,\nand can be any combination of <a>image/image.TRIM_TOP</a>, <a>image/image.TRIM_BOTTOM</a>, <a>image/image.TRIM_LEFT</a>,\nand <a>image/image.TRIM_RIGHT</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"mode":{"name":"mode","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"sides":{"name":"sides","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"15","annotations":[]}},"annotations":[]},"vignette":{"name":"vignette","qualifiedName":"image/image.vignette","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Image","inner":[]}],"parameters":{"src":{"name":"src","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.3","annotations":[]},"end":{"name":"end","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.75","annotations":[]},"amount":{"name":"amount","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.double","inner":[]}],"value":"0.8","annotations":[]}},"annotations":[]},"writeJpg":{"name":"writeJpg","qualifiedName":"image/image.writeJpg","comment":"<p>Renamed to <a>image/image.encodeJpg</a>, left for backward compatibility.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"quality":{"name":"quality","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"100","annotations":[]}},"annotations":[]},"writePng":{"name":"writePng","qualifiedName":"image/image.writePng","comment":"<p>Renamed to <a>image/image.encodePng</a>, left for backward compatibility.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]},"level":{"name":"level","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"6","annotations":[]}},"annotations":[]},"writeTga":{"name":"writeTga","qualifiedName":"image/image.writeTga","comment":"<p>Renamed to <a>image/image.encodeTga</a>, left for backward compatibility.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"xyzToRGB":{"name":"xyzToRGB","qualifiedName":"image/image.xyzToRGB","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"z":{"name":"z","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Animation","qualifiedName":"image/image.Animation","preview":"<p>Stores multiple images, most oftenly as the frames of an animation.</p>"},{"name":"BitmapFont","qualifiedName":"image/image.BitmapFont","preview":"<p>A bitmap font that can be used with <a>image/image.drawString</a> and <a>image/image.drawChar</a> functions.\nYou can generate a font files from a program\nlike: http://kvazars.com/littera</p>"},{"name":"BitmapFontCharacter","qualifiedName":"image/image.BitmapFontCharacter","preview":"<p>A single character in a <a>image/image.BitmapFont</a>.</p>"},{"name":"DecodeInfo","qualifiedName":"image/image.DecodeInfo","preview":"<p>Provides information about the image being decoded.</p>"},{"name":"Decoder","qualifiedName":"image/image.Decoder","preview":"<p>Base class for image format decoders.</p>"},{"name":"Encoder","qualifiedName":"image/image.Encoder","preview":"<p>Base class for image format encoders.</p>"},{"name":"ExrAttribute","qualifiedName":"image/image.ExrAttribute"},{"name":"ExrB44Compressor","qualifiedName":"image/image.ExrB44Compressor"},{"name":"ExrChannel","qualifiedName":"image/image.ExrChannel"},{"name":"ExrCompressor","qualifiedName":"image/image.ExrCompressor"},{"name":"ExrDecoder","qualifiedName":"image/image.ExrDecoder","preview":"<p>Decode an OpenEXR formatted image.</p>"},{"name":"ExrHufDec","qualifiedName":"image/image.ExrHufDec"},{"name":"ExrHuffman","qualifiedName":"image/image.ExrHuffman"},{"name":"ExrImage","qualifiedName":"image/image.ExrImage"},{"name":"ExrPart","qualifiedName":"image/image.ExrPart"},{"name":"ExrPizCompressor","qualifiedName":"image/image.ExrPizCompressor","preview":"<p>Wavelet compression</p>"},{"name":"ExrPxr24Compressor","qualifiedName":"image/image.ExrPxr24Compressor"},{"name":"ExrRleCompressor","qualifiedName":"image/image.ExrRleCompressor"},{"name":"ExrWavelet","qualifiedName":"image/image.ExrWavelet"},{"name":"ExrZipCompressor","qualifiedName":"image/image.ExrZipCompressor"},{"name":"GifColorMap","qualifiedName":"image/image.GifColorMap"},{"name":"GifDecoder","qualifiedName":"image/image.GifDecoder","preview":"<p>A decoder for the GIF image format.  This supports both single frame and\nanimated GIF files, and transparency.</p>"},{"name":"GifEncoder","qualifiedName":"image/image.GifEncoder"},{"name":"GifImageDesc","qualifiedName":"image/image.GifImageDesc"},{"name":"GifInfo","qualifiedName":"image/image.GifInfo"},{"name":"Half","qualifiedName":"image/image.Half","preview":"<p>A 16-bit floating-point number, used by high-dynamic-range image formats\nas a more efficient storage for floating-point values that don't require\nfull 32-bit precision. A list of Half floats can be stored in a <a>image/dart-typed_data.Uint16List</a>,\nand converted to a double using the <a>image/image.Half.HalfToDouble</a> static method.</p>"},{"name":"HdrImage","qualifiedName":"image/image.HdrImage","preview":"<p>A high dynamic range RGBA image stored in 16-bit or 32-bit floating-point\nchannels.</p>"},{"name":"HdrSlice","qualifiedName":"image/image.HdrSlice","preview":"<p>A slice is the data for an image framebuffer for a single channel.</p>"},{"name":"Image","qualifiedName":"image/image.Image","preview":"<p>A 32-bit image buffer where pixels are encoded into 32-bit unsigned ints.\nYou can use the methods in color to encode/decode the RGBA channels of a\ncolor for a pixel.</p>"},{"name":"InputBuffer","qualifiedName":"image/image.InputBuffer","preview":"<p>A buffer that can be read as a stream of bytes.</p>"},{"name":"Jpeg","qualifiedName":"image/image.Jpeg"},{"name":"JpegAdobe","qualifiedName":"image/image.JpegAdobe"},{"name":"JpegComponent","qualifiedName":"image/image.JpegComponent"},{"name":"JpegData","qualifiedName":"image/image.JpegData"},{"name":"JpegDecoder","qualifiedName":"image/image.JpegDecoder","preview":"<p>Decode a jpeg encoded image.</p>"},{"name":"JpegEncoder","qualifiedName":"image/image.JpegEncoder","preview":"<p>Encode an image to the JPEG format.</p>"},{"name":"JpegFrame","qualifiedName":"image/image.JpegFrame"},{"name":"JpegInfo","qualifiedName":"image/image.JpegInfo"},{"name":"JpegJfif","qualifiedName":"image/image.JpegJfif"},{"name":"JpegScan","qualifiedName":"image/image.JpegScan"},{"name":"LzwDecoder","qualifiedName":"image/image.LzwDecoder"},{"name":"NeuralQuantizer","qualifiedName":"image/image.NeuralQuantizer","preview":"<p>Compute a 256 color map that best represents the given image.</p>"},{"name":"OutputBuffer","qualifiedName":"image/image.OutputBuffer"},{"name":"PngDecoder","qualifiedName":"image/image.PngDecoder","preview":"<p>Decode a PNG encoded image.</p>"},{"name":"PngEncoder","qualifiedName":"image/image.PngEncoder","preview":"<p>Encode an image to the PNG format.</p>"},{"name":"PngFrame","qualifiedName":"image/image.PngFrame","preview":"<p>Decodes a frame from a PNG animation.</p>"},{"name":"PngInfo","qualifiedName":"image/image.PngInfo"},{"name":"PsdBlendingRanges","qualifiedName":"image/image.PsdBlendingRanges"},{"name":"PsdChannel","qualifiedName":"image/image.PsdChannel"},{"name":"PsdDecoder","qualifiedName":"image/image.PsdDecoder","preview":"<p>Decode a Photoshop PSD image.</p>"},{"name":"PsdImage","qualifiedName":"image/image.PsdImage"},{"name":"PsdImageResource","qualifiedName":"image/image.PsdImageResource"},{"name":"PsdLayer","qualifiedName":"image/image.PsdLayer"},{"name":"PsdLayerAdditionalData","qualifiedName":"image/image.PsdLayerAdditionalData"},{"name":"PsdLayerData","qualifiedName":"image/image.PsdLayerData"},{"name":"PsdLayerSectionDivider","qualifiedName":"image/image.PsdLayerSectionDivider"},{"name":"PsdMask","qualifiedName":"image/image.PsdMask"},{"name":"SeperableKernel","qualifiedName":"image/image.SeperableKernel","preview":"<p>A kernel object to use with <a>image/image.seperableConvolution</a> filtering.</p>"},{"name":"TgaDecoder","qualifiedName":"image/image.TgaDecoder","preview":"<p>Decode a Targa TGA image. This only supports the 24-bit uncompressed format.\nTODO add more TGA support.</p>"},{"name":"TgaEncoder","qualifiedName":"image/image.TgaEncoder","preview":"<p>Encode a Targa TGA image.  This only supports the 24-bit uncompressed format.</p>"},{"name":"TgaInfo","qualifiedName":"image/image.TgaInfo"},{"name":"TiffBitReader","qualifiedName":"image/image.TiffBitReader"},{"name":"TiffDecoder","qualifiedName":"image/image.TiffDecoder"},{"name":"TiffEntry","qualifiedName":"image/image.TiffEntry"},{"name":"TiffFaxDecoder","qualifiedName":"image/image.TiffFaxDecoder"},{"name":"TiffImage","qualifiedName":"image/image.TiffImage"},{"name":"TiffInfo","qualifiedName":"image/image.TiffInfo"},{"name":"VP8","qualifiedName":"image/image.VP8","preview":"<p>WebP lossy format.</p>"},{"name":"VP8BandProbas","qualifiedName":"image/image.VP8BandProbas","preview":"<p>All the probas associated to one band</p>"},{"name":"VP8BitReader","qualifiedName":"image/image.VP8BitReader"},{"name":"VP8FInfo","qualifiedName":"image/image.VP8FInfo","preview":"<p>filter specs</p>"},{"name":"VP8Filter","qualifiedName":"image/image.VP8Filter"},{"name":"VP8FilterHeader","qualifiedName":"image/image.VP8FilterHeader","preview":"<p>Filter parameters</p>"},{"name":"VP8FrameHeader","qualifiedName":"image/image.VP8FrameHeader"},{"name":"VP8L","qualifiedName":"image/image.VP8L","preview":"<p>WebP lossless format.</p>"},{"name":"VP8LBitReader","qualifiedName":"image/image.VP8LBitReader"},{"name":"VP8LColorCache","qualifiedName":"image/image.VP8LColorCache"},{"name":"VP8LTransform","qualifiedName":"image/image.VP8LTransform"},{"name":"VP8MB","qualifiedName":"image/image.VP8MB","preview":"<p>Top/Left Contexts used for syntax-parsing</p>"},{"name":"VP8MBData","qualifiedName":"image/image.VP8MBData","preview":"<p>Data needed to reconstruct a macroblock</p>"},{"name":"VP8PictureHeader","qualifiedName":"image/image.VP8PictureHeader"},{"name":"VP8Proba","qualifiedName":"image/image.VP8Proba","preview":"<p>Struct collecting all frame-persistent probabilities.</p>"},{"name":"VP8QuantMatrix","qualifiedName":"image/image.VP8QuantMatrix","preview":"<p>Dequantization matrices</p>"},{"name":"VP8Random","qualifiedName":"image/image.VP8Random"},{"name":"VP8SegmentHeader","qualifiedName":"image/image.VP8SegmentHeader","preview":"<p>Segment features</p>"},{"name":"VP8TopSamples","qualifiedName":"image/image.VP8TopSamples","preview":"<p>Saved top samples, per macroblock. Fits into a cache-line.</p>"},{"name":"WebPAlpha","qualifiedName":"image/image.WebPAlpha"},{"name":"WebPDecoder","qualifiedName":"image/image.WebPDecoder","preview":"<p>Decode a WebP formatted image. This supports lossless (vp8l), lossy (vp8),\nlossy+alpha, and animated WebP images.</p>"},{"name":"WebPEncoder","qualifiedName":"image/image.WebPEncoder","preview":"<p>Encode an image to the PNG format.</p>"},{"name":"WebPFilters","qualifiedName":"image/image.WebPFilters"},{"name":"WebPFrame","qualifiedName":"image/image.WebPFrame","preview":"<p>Decodes a frame from a WebP animation.</p>"},{"name":"WebPInfo","qualifiedName":"image/image.WebPInfo","preview":"<p>Features gathered from the bitstream</p>"}],"typedef":{"ProgressCallback":{"name":"ProgressCallback","qualifiedName":"image/image.ProgressCallback","comment":"<p>A callback called during the decoding process.</p>","return":"void","parameters":{"frame":{"name":"frame","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"numFrames":{"name":"numFrames","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"progress":{"name":"progress","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"total":{"name":"total","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A callback called during the decoding process.</p>"}},"error":[{"name":"ImageException","qualifiedName":"image/image.ImageException","preview":"<p>An exception thrown when there was a problem in the image library.</p>"}]},"packageName":"image","packageIntro":"<h1>image</h1>\n<p><a href=\"https://drone.io/github.com/brendan-duncan/image/latest\"><a href=\"https://drone.io/github.com/brendan-duncan/image/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/brendan-duncan/image/status.png\"></img></a></a></p>\n<h2>Overview</h2>\n<p>A Dart library providing the ability to load, save and manipulate images in a variety of different file formats.</p>\n<p>The library has no reliance on <code>dart:io</code>, so it can be used for both server and\nweb applications. </p>\n<p><strong>Supported Image Formats:</strong></p>\n<p>Read/Write:</p><ul><li>PNG / Animated APNG</li><li>JPEG</li><li>Targa</li><li>GIF / Animated GIF</li></ul>\n<p>Read Only:</p><ul><li>WebP / Animated WebP</li><li>TIFF</li><li>Photoshop PSD</li><li>OpenEXR</li></ul>\n<h2><a href=\"https://github.com/brendan-duncan/image/wiki\">Documentation</a></h2>\n<h2><a href=\"http://brendan-duncan.github.io/#image/image\">API</a></h2>\n<h2><a href=\"https://github.com/brendan-duncan/image/wiki/Examples\">Examples</a></h2>\n<h2><a href=\"https://github.com/brendan-duncan/image/wiki#format-decoding-functions\">Format Decoding Functions</a></h2>\n<h2>Samples</h2>\n<p>Load an image, resize it, and save it as a png:</p>\n<pre><code>import 'dart:io' as Io;\nimport 'package:image/image.dart';\nvoid main() {\n  // Read an image from file (webp in this case).\n  // decodeImage will identify the format of the image and use the appropriate\n  // decoder.\n  Image image = decodeImage(new Io.File('test.webp').readAsBytesSync());\n\n  // Resize the image to a 120x? thumbnail (maintaining the aspect ratio).\n  Image thumbnail = copyResize(image, 120);\n\n  // Save the thumbnail as a PNG.\n  new Io.File('thumbnail.png')\n        ..writeAsBytesSync(encodePng(thumbnail));\n}\n</code></pre>"}