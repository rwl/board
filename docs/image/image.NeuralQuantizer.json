{"name":"NeuralQuantizer","qualifiedName":"image/image.NeuralQuantizer","comment":"<p>Compute a 256 color map that best represents the given image.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"ALPHA_BIAS_SHIFT":{"name":"ALPHA_BIAS_SHIFT","qualifiedName":"image/image.NeuralQuantizer.ALPHA_BIAS_SHIFT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"BETA":{"name":"BETA","qualifiedName":"image/image.NeuralQuantizer.BETA","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"BETA_GAMMA":{"name":"BETA_GAMMA","qualifiedName":"image/image.NeuralQuantizer.BETA_GAMMA","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"BG_COLOR":{"name":"BG_COLOR","qualifiedName":"image/image.NeuralQuantizer.BG_COLOR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"CUT_NET_SIZE":{"name":"CUT_NET_SIZE","qualifiedName":"image/image.NeuralQuantizer.CUT_NET_SIZE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"GAMMA":{"name":"GAMMA","qualifiedName":"image/image.NeuralQuantizer.GAMMA","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"INIT_ALPHA":{"name":"INIT_ALPHA","qualifiedName":"image/image.NeuralQuantizer.INIT_ALPHA","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"INIT_BIAS_RADIUS":{"name":"INIT_BIAS_RADIUS","qualifiedName":"image/image.NeuralQuantizer.INIT_BIAS_RADIUS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"INIT_RAD":{"name":"INIT_RAD","qualifiedName":"image/image.NeuralQuantizer.INIT_RAD","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MAX_NET_POS":{"name":"MAX_NET_POS","qualifiedName":"image/image.NeuralQuantizer.MAX_NET_POS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MAX_PRIME":{"name":"MAX_PRIME","qualifiedName":"image/image.NeuralQuantizer.MAX_PRIME","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NET_SIZE":{"name":"NET_SIZE","qualifiedName":"image/image.NeuralQuantizer.NET_SIZE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NUM_CYCLES":{"name":"NUM_CYCLES","qualifiedName":"image/image.NeuralQuantizer.NUM_CYCLES","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PRIME1":{"name":"PRIME1","qualifiedName":"image/image.NeuralQuantizer.PRIME1","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PRIME2":{"name":"PRIME2","qualifiedName":"image/image.NeuralQuantizer.PRIME2","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PRIME3":{"name":"PRIME3","qualifiedName":"image/image.NeuralQuantizer.PRIME3","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"PRIME4":{"name":"PRIME4","qualifiedName":"image/image.NeuralQuantizer.PRIME4","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"RADIUS_BIAS":{"name":"RADIUS_BIAS","qualifiedName":"image/image.NeuralQuantizer.RADIUS_BIAS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"RADIUS_BIAS_SHIFT":{"name":"RADIUS_BIAS_SHIFT","qualifiedName":"image/image.NeuralQuantizer.RADIUS_BIAS_SHIFT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"RADIUS_DEC":{"name":"RADIUS_DEC","qualifiedName":"image/image.NeuralQuantizer.RADIUS_DEC","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"SPECIALS":{"name":"SPECIALS","qualifiedName":"image/image.NeuralQuantizer.SPECIALS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"colorMap":{"name":"colorMap","qualifiedName":"image/image.NeuralQuantizer.colorMap","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"numColors":{"name":"numColors","qualifiedName":"image/image.NeuralQuantizer.numColors","comment":"<p>How many colors are in the <a>image/image.NeuralQuantizer.colorMap</a>?</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"image/image.NeuralQuantizer.NeuralQuantizer-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addImage":{"name":"addImage","qualifiedName":"image/image.NeuralQuantizer.addImage","comment":"<p>Add an image to the quantized color table.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"color":{"name":"color","qualifiedName":"image/image.NeuralQuantizer.color","comment":"<p>Get a color from the <a>image/image.NeuralQuantizer.colorMap</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getIndexMap":{"name":"getIndexMap","qualifiedName":"image/image.NeuralQuantizer.getIndexMap","comment":"<p>Convert the <a>image/image.NeuralQuantizer.getIndexMap.image</a> to an index map, mapping to this <a>image/image.NeuralQuantizer.colorMap</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-typed_data.Uint8List","inner":[]}],"parameters":{"image":{"name":"image","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getQuantizedColor":{"name":"getQuantizedColor","qualifiedName":"image/image.NeuralQuantizer.getQuantizedColor","comment":"<p>Find the color closest to <a>image/image.NeuralQuantizer.getQuantizedColor.c</a> in the <a>image/image.NeuralQuantizer.colorMap</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lookup":{"name":"lookup","qualifiedName":"image/image.NeuralQuantizer.lookup","comment":"<p>Find the index of the closest color to <a>image/image.NeuralQuantizer.lookup.c</a> in the <a>image/image.NeuralQuantizer.colorMap</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lookupRGB":{"name":"lookupRGB","qualifiedName":"image/image.NeuralQuantizer.lookupRGB","comment":"<p>Find the index of the closest color to <a>image/image.NeuralQuantizer.lookupRGB.r</a>,<a>image/image.NeuralQuantizer.lookupRGB.g</a>,<a>image/image.NeuralQuantizer.lookupRGB.b</a> in the <a>image/image.NeuralQuantizer.colorMap</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"image/image.NeuralQuantizer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>image/image.NeuralQuantizer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"image/image.NeuralQuantizer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"image/image.NeuralQuantizer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>image/image.NeuralQuantizer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>image/image.NeuralQuantizer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"image/image.NeuralQuantizer.noSuchMethod","comment":"<p><a>image/image.NeuralQuantizer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>image/image.NeuralQuantizer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>image/image.NeuralQuantizer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>image/image.NeuralQuantizer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"image/image.NeuralQuantizer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}