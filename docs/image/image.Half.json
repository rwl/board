{"name":"Half","qualifiedName":"image/image.Half","comment":"<p>A 16-bit floating-point number, used by high-dynamic-range image formats\nas a more efficient storage for floating-point values that don't require\nfull 32-bit precision. A list of Half floats can be stored in a <a>image/dart-typed_data.Uint16List</a>,\nand converted to a double using the <a>image/image.Half.HalfToDouble</a> static method.</p>\n<p>This class is derived from the OpenEXR library.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"image/image.Half.Half-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromBits":{"name":"fromBits","qualifiedName":"image/image.Half.Half-fromBits","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"bits":{"name":"bits","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"*":{"name":"*","qualifiedName":"image/image.Half.*","comment":"","commentFrom":"image.Half.*","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"image/image.Half.+","comment":"<p>Addition operator for Half or num left operands.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"image/image.Half.-","comment":"<p>Subtraction operator for Half or num left operands.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"/":{"name":"/","qualifiedName":"image/image.Half./","comment":"","commentFrom":"image.Half./","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"image/image.Half.unary-","comment":"<p>Unary minus</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{},"annotations":[]}},"methods":{"DoubleToHalf":{"name":"DoubleToHalf","qualifiedName":"image/image.Half.DoubleToHalf","comment":"","commentFrom":"image.Half.DoubleToHalf","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"HalfToDouble":{"name":"HalfToDouble","qualifiedName":"image/image.Half.HalfToDouble","comment":"","commentFrom":"image.Half.HalfToDouble","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"bits":{"name":"bits","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bits":{"name":"bits","qualifiedName":"image/image.Half.bits","comment":"","commentFrom":"image.Half.bits","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isDenormalized":{"name":"isDenormalized","qualifiedName":"image/image.Half.isDenormalized","comment":"<p>Returns true if h is a denormalized number.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isFinite":{"name":"isFinite","qualifiedName":"image/image.Half.isFinite","comment":"<p>Returns true if h is a normalized number, a denormalized number or zero.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isInfinity":{"name":"isInfinity","qualifiedName":"image/image.Half.isInfinity","comment":"<p>Returns true if h is a positive or a negative infinity.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNan":{"name":"isNan","qualifiedName":"image/image.Half.isNan","comment":"<p>Returns true if h is a NAN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNegative":{"name":"isNegative","qualifiedName":"image/image.Half.isNegative","comment":"<p>Returns true if the sign bit of h is set (negative).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNormalized":{"name":"isNormalized","qualifiedName":"image/image.Half.isNormalized","comment":"<p>Returns true if h is a normalized number.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isZero":{"name":"isZero","qualifiedName":"image/image.Half.isZero","comment":"<p>Returns true if h is zero.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"negInf":{"name":"negInf","qualifiedName":"image/image.Half.negInf","comment":"<p>Returns -infinity.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{},"annotations":[]},"posInf":{"name":"posInf","qualifiedName":"image/image.Half.posInf","comment":"<p>Returns +infinity.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{},"annotations":[]},"qNan":{"name":"qNan","qualifiedName":"image/image.Half.qNan","comment":"<p>Returns a NAN with the bit pattern 0111111111111111.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{},"annotations":[]},"round":{"name":"round","qualifiedName":"image/image.Half.round","comment":"<p>Round to n-bit precision (n should be between 0 and 10).\nAfter rounding, the significand's 10-n least significant\nbits will be zero.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"sNan":{"name":"sNan","qualifiedName":"image/image.Half.sNan","comment":"<p>Returns a NAN with the bit pattern 0111110111111111.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"image/image.Half","inner":[]}],"parameters":{},"annotations":[]},"setBits":{"name":"setBits","qualifiedName":"image/image.Half.setBits","comment":"","commentFrom":"image.Half.setBits","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"bits":{"name":"bits","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toDouble":{"name":"toDouble","qualifiedName":"image/image.Half.toDouble","comment":"","commentFrom":"image.Half.toDouble","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"image/image.Half.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>image/image.Half.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"image/image.Half.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"image/image.Half.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>image/image.Half.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>image/image.Half.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"image/image.Half.noSuchMethod","comment":"<p><a>image/image.Half.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>image/image.Half.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>image/image.Half.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>image/image.Half.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"image/image.Half.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}