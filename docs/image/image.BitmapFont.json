{"name":"BitmapFont","qualifiedName":"image/image.BitmapFont","comment":"<p>A bitmap font that can be used with <a>image/image.drawString</a> and <a>image/image.drawChar</a> functions.\nYou can generate a font files from a program\nlike: http://kvazars.com/littera</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"antialias":{"name":"antialias","qualifiedName":"image/image.BitmapFont.antialias","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"base":{"name":"base","qualifiedName":"image/image.BitmapFont.base","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"bold":{"name":"bold","qualifiedName":"image/image.BitmapFont.bold","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"characters":{"name":"characters","qualifiedName":"image/image.BitmapFont.characters","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"image/image.BitmapFontCharacter","inner":[]}]}],"annotations":[]},"charset":{"name":"charset","qualifiedName":"image/image.BitmapFont.charset","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"face":{"name":"face","qualifiedName":"image/image.BitmapFont.face","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"italic":{"name":"italic","qualifiedName":"image/image.BitmapFont.italic","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"kernings":{"name":"kernings","qualifiedName":"image/image.BitmapFont.kernings","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"dart-core.int","inner":[]}]}]}],"annotations":[]},"lineHeight":{"name":"lineHeight","qualifiedName":"image/image.BitmapFont.lineHeight","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"outline":{"name":"outline","qualifiedName":"image/image.BitmapFont.outline","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"packed":{"name":"packed","qualifiedName":"image/image.BitmapFont.packed","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"padding":{"name":"padding","qualifiedName":"image/image.BitmapFont.padding","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"pages":{"name":"pages","qualifiedName":"image/image.BitmapFont.pages","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"scaleH":{"name":"scaleH","qualifiedName":"image/image.BitmapFont.scaleH","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.num","inner":[]}],"annotations":[]},"scaleW":{"name":"scaleW","qualifiedName":"image/image.BitmapFont.scaleW","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.num","inner":[]}],"annotations":[]},"size":{"name":"size","qualifiedName":"image/image.BitmapFont.size","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"smooth":{"name":"smooth","qualifiedName":"image/image.BitmapFont.smooth","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"spacing":{"name":"spacing","qualifiedName":"image/image.BitmapFont.spacing","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"stretchH":{"name":"stretchH","qualifiedName":"image/image.BitmapFont.stretchH","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"unicode":{"name":"unicode","qualifiedName":"image/image.BitmapFont.unicode","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"fromFnt":{"name":"fromFnt","qualifiedName":"image/image.BitmapFont.BitmapFont-fromFnt","comment":"<p>Decode a <a>image/image.BitmapFont</a> from the contents of font definition (.fnt) file,\nand an <a>image/image.Image</a> that stores the font map.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"fnt":{"name":"fnt","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"page":{"name":"page","optional":false,"named":false,"default":false,"type":[{"outer":"image/image.Image","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromZip":{"name":"fromZip","qualifiedName":"image/image.BitmapFont.BitmapFont-fromZip","comment":"<p>Decode a <a>image/image.BitmapFont</a> from the contents of a zip file that stores the\n.fnt font definition and associated PNG images.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"fileData":{"name":"fileData","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"characterXAdvance":{"name":"characterXAdvance","qualifiedName":"image/image.BitmapFont.characterXAdvance","comment":"<p>Get the amount the writer x position should advance after drawing the\ncharacter <a>image/image.BitmapFont.characterXAdvance.ch</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"ch":{"name":"ch","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"image/image.BitmapFont.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>image/image.BitmapFont.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"image/image.BitmapFont.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"image/image.BitmapFont.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>image/image.BitmapFont.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>image/image.BitmapFont.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"image/image.BitmapFont.noSuchMethod","comment":"<p><a>image/image.BitmapFont.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>image/image.BitmapFont.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>image/image.BitmapFont.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>image/image.BitmapFont.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"image/image.BitmapFont.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}