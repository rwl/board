{"name":"ExrImage","qualifiedName":"image/image.ExrImage","comment":"","isAbstract":false,"superclass":"image/image.DecodeInfo","implements":[],"subclass":[],"variables":{"ALL_FLAGS":{"name":"ALL_FLAGS","qualifiedName":"image/image.ExrImage.ALL_FLAGS","comment":"<p>Bitwise OR of all supported flags.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"EXR_VERSION":{"name":"EXR_VERSION","qualifiedName":"image/image.ExrImage.EXR_VERSION","comment":"<p>Value that goes into VERSION<em>NUMBER</em>FIELD.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LONG_NAMES_FLAG":{"name":"LONG_NAMES_FLAG","qualifiedName":"image/image.ExrImage.LONG_NAMES_FLAG","comment":"<p>File contains long attribute or channel names</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MAGIC":{"name":"MAGIC","qualifiedName":"image/image.ExrImage.MAGIC","comment":"<p>The MAGIC number is stored in the first four bytes of every\nOpenEXR image file.  This can be used to quickly test whether\na given file is an OpenEXR image file (see isImfMagic(), below).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"MULTI_PART_FILE_FLAG":{"name":"MULTI_PART_FILE_FLAG","qualifiedName":"image/image.ExrImage.MULTI_PART_FILE_FLAG","comment":"<p>File has multiple parts.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"NON_IMAGE_FLAG":{"name":"NON_IMAGE_FLAG","qualifiedName":"image/image.ExrImage.NON_IMAGE_FLAG","comment":"<p>File has at least one part which is not a regular scanline image or\nregular tiled image (that is, it is a deep format).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"TILED_FLAG":{"name":"TILED_FLAG","qualifiedName":"image/image.ExrImage.TILED_FLAG","comment":"<p>File is tiled</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"flags":{"name":"flags","qualifiedName":"image/image.ExrImage.flags","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"parts":{"name":"parts","qualifiedName":"image/image.ExrImage.parts","comment":"<p>An EXR image has one or more parts, each of which contains a framebuffer.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"image/image.ExrPart","inner":[]}]}],"annotations":[]},"version":{"name":"version","qualifiedName":"image/image.ExrImage.version","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{"backgroundColor":{"name":"backgroundColor","qualifiedName":"image/image.DecodeInfo.backgroundColor","comment":"<p>The suggested background color of the canvas.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"height":{"name":"height","qualifiedName":"image/image.DecodeInfo.height","comment":"<p>The height of the image canvas.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"width":{"name":"width","qualifiedName":"image/image.DecodeInfo.width","comment":"<p>The width of the image canvas.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"numFrames":{"name":"numFrames","qualifiedName":"image/image.ExrImage.numFrames","comment":"<p>The number of frames that can be decoded.</p>","commentFrom":"image.DecodeInfo.numFrames","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"image/image.ExrImage.ExrImage-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"getPart":{"name":"getPart","qualifiedName":"image/image.ExrImage.getPart","comment":"","commentFrom":"image.ExrImage.getPart","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"image/image.ExrPart","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isValidFile":{"name":"isValidFile","qualifiedName":"image/image.ExrImage.isValidFile","comment":"<p>Parse just enough of the file to identify that it's an EXR image.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"numParts":{"name":"numParts","qualifiedName":"image/image.ExrImage.numParts","comment":"","commentFrom":"image.ExrImage.numParts","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"image/image.ExrImage.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>image/image.ExrImage.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"numFrames":{"name":"numFrames","qualifiedName":"image/image.ExrImage.numFrames","comment":"<p>The number of frames that can be decoded.</p>","commentFrom":"","inheritedFrom":"image.DecodeInfo.numFrames","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"image/image.ExrImage.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"image/image.ExrImage.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>image/image.ExrImage.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>image/image.ExrImage.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"image/image.ExrImage.noSuchMethod","comment":"<p><a>image/image.ExrImage.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>image/image.ExrImage.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>image/image.ExrImage.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>image/image.ExrImage.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"image/image.ExrImage.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}