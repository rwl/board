{"name":"ArgParser","qualifiedName":"args/args.ArgParser","comment":"<p>A class for taking a list of raw command line arguments and parsing out\noptions and flags from them.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"commands":{"name":"commands","qualifiedName":"args/args.ArgParser.commands","comment":"<p>The commands that have been defined for this parser.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"args/args.ArgParser","inner":[]}]}],"annotations":[]},"options":{"name":"options","qualifiedName":"args/args.ArgParser.options","comment":"<p>The options that have been defined for this parser.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"args/args.Option","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"args/args.ArgParser.ArgParser-","comment":"<p>Creates a new ArgParser.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"args/args.ArgParser","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"addCommand":{"name":"addCommand","qualifiedName":"args/args.ArgParser.addCommand","comment":"<p>Defines a command.</p>\n<p>A command is a named argument which may in turn define its own options and\nsubcommands using the given parser. If <a>args/args.ArgParser.addCommand.parser</a> is omitted, implicitly\ncreates a new one. Returns the parser for the command.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"args/args.ArgParser","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"parser":{"name":"parser","optional":true,"named":false,"default":false,"type":[{"outer":"args/args.ArgParser","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addFlag":{"name":"addFlag","qualifiedName":"args/args.ArgParser.addFlag","comment":"<p>Defines a flag. Throws an <a>dart-core.ArgumentError</a> if:</p><ul><li>There is already an option named <a>args/args.ArgParser.addFlag.name</a>.</li><li>There is already an option using abbreviation <a>args/args.ArgParser.addFlag.abbr</a>.</li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"abbr":{"name":"abbr","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"help":{"name":"help","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"defaultsTo":{"name":"defaultsTo","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"negatable":{"name":"negatable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"callback":{"name":"callback","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}}}},"hide":{"name":"hide","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"addOption":{"name":"addOption","qualifiedName":"args/args.ArgParser.addOption","comment":"<p>Defines a value-taking option. Throws an <a>dart-core.ArgumentError</a> if:</p><ul><li>There is already an option with name <a>args/args.ArgParser.addOption.name</a>.</li><li>There is already an option using abbreviation <a>args/args.ArgParser.addOption.abbr</a>.</li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"abbr":{"name":"abbr","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"help":{"name":"help","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"allowed":{"name":"allowed","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"allowedHelp":{"name":"allowedHelp","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"defaultsTo":{"name":"defaultsTo","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"callback":{"name":"callback","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}},"allowMultiple":{"name":"allowMultiple","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"hide":{"name":"hide","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"findByAbbreviation":{"name":"findByAbbreviation","qualifiedName":"args/args.ArgParser.findByAbbreviation","comment":"<p>Finds the option whose abbreviation is <a>args/args.ArgParser.findByAbbreviation.abbr</a>, or <code>null</code> if no option has\nthat abbreviation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"args/args.Option","inner":[]}],"parameters":{"abbr":{"name":"abbr","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getDefault":{"name":"getDefault","qualifiedName":"args/args.ArgParser.getDefault","comment":"<p>Get the default value for an option. Useful after parsing to test\nif the user specified something other than the default.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"option":{"name":"option","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getUsage":{"name":"getUsage","qualifiedName":"args/args.ArgParser.getUsage","comment":"<p>Generates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"parse":{"name":"parse","qualifiedName":"args/args.ArgParser.parse","comment":"<p>Parses <a>args/args.ArgParser.parse.args</a>, a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.</p>\n<p>If <a>args/args.ArgParser.parse.allowTrailingOptions</a> is set, the parser will continue parsing even\nafter it finds an argument that is neither an option nor a command.\nThis allows options to be specified after regular arguments.</p>\n<p><a>args/args.ArgParser.parse.allowTrailingOptions</a> is false by default, so when a non-option,\nnon-command argument is encountered, it and all remaining arguments,\neven those that look like options are passed to the innermost command.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"args/args.ArgResults","inner":[]}],"parameters":{"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"allowTrailingOptions":{"name":"allowTrailingOptions","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"args/args.ArgParser.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>args/args.ArgParser.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"args/args.ArgParser.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"args/args.ArgParser.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>args/args.ArgParser.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>args/args.ArgParser.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"args/args.ArgParser.noSuchMethod","comment":"<p><a>args/args.ArgParser.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>args/args.ArgParser.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>args/args.ArgParser.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>args/args.ArgParser.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"args/args.ArgParser.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}