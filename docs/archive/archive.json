{"name":"archive","qualifiedName":"archive/archive","comment":"","variables":{"BIG_ENDIAN":{"name":"BIG_ENDIAN","qualifiedName":"archive/archive.BIG_ENDIAN","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"LITTLE_ENDIAN":{"name":"LITTLE_ENDIAN","qualifiedName":"archive/archive.LITTLE_ENDIAN","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"getAdler32":{"name":"getAdler32","qualifiedName":"archive/archive.getAdler32","comment":"<p>Get the Adler-32 checksum for the given array. You can append bytes to an\nalready computed adler checksum by specifying the previous <a>archive/archive.getAdler32.adler</a> value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"array":{"name":"array","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"adler":{"name":"adler","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"getCrc32":{"name":"getCrc32","qualifiedName":"archive/archive.getCrc32","comment":"<p>Get the CRC-32 checksum of the given array. You can append bytes to an\nalready computed crc by specifying the previous <a>archive/archive.getCrc32.crc</a> value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"array":{"name":"array","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"crc":{"name":"crc","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Adler32","qualifiedName":"archive/archive.Adler32","preview":"<p>A class to compute Adler-32 checksums.</p>"},{"name":"Archive","qualifiedName":"archive/archive.Archive","preview":"<p>A collection of files.</p>"},{"name":"ArchiveFile","qualifiedName":"archive/archive.ArchiveFile","preview":"<p>A file contained in an Archive.</p>"},{"name":"BZip2","qualifiedName":"archive/archive.BZip2"},{"name":"BZip2Decoder","qualifiedName":"archive/archive.BZip2Decoder","preview":"<p>Decompress bzip2 compressed data.\nDerived from libbzip2 (http://www.bzip.org).</p>"},{"name":"BZip2Encoder","qualifiedName":"archive/archive.BZip2Encoder","preview":"<p>Compress data using the BZip2 format.\nDerived from libbzip2 (http://www.bzip.org).</p>"},{"name":"Bz2BitReader","qualifiedName":"archive/archive.Bz2BitReader"},{"name":"Bz2BitWriter","qualifiedName":"archive/archive.Bz2BitWriter"},{"name":"Crc32","qualifiedName":"archive/archive.Crc32","preview":"<p>A class to compute Crc-32 checksums.</p>"},{"name":"Deflate","qualifiedName":"archive/archive.Deflate"},{"name":"GZipDecoder","qualifiedName":"archive/archive.GZipDecoder","preview":"<p>Decompress data with the gzip format decoder.</p>"},{"name":"GZipEncoder","qualifiedName":"archive/archive.GZipEncoder"},{"name":"HuffmanTable","qualifiedName":"archive/archive.HuffmanTable","preview":"<p>Build huffman table from length list.</p>"},{"name":"Inflate","qualifiedName":"archive/archive.Inflate"},{"name":"InputStream","qualifiedName":"archive/archive.InputStream","preview":"<p>A buffer that can be read as a stream of bytes.</p>"},{"name":"MemPtr","qualifiedName":"archive/archive.MemPtr","preview":"<p>A helper class to work with List and TypedData in a way similar to pointers\nin C.</p>"},{"name":"OutputStream","qualifiedName":"archive/archive.OutputStream"},{"name":"TarDecoder","qualifiedName":"archive/archive.TarDecoder","preview":"<p>Decode a tar formatted buffer into an <a>archive/archive.Archive</a> object.</p>"},{"name":"TarEncoder","qualifiedName":"archive/archive.TarEncoder","preview":"<p>Encode an <a>archive/archive.Archive</a> object into a tar formatted buffer.</p>"},{"name":"TarFile","qualifiedName":"archive/archive.TarFile","preview":"<p>File Header (512 bytes)\n Offst Size Field</p>"},{"name":"ZLibDecoder","qualifiedName":"archive/archive.ZLibDecoder","preview":"<p>Decompress data with the zlib format decoder.</p>"},{"name":"ZLibEncoder","qualifiedName":"archive/archive.ZLibEncoder"},{"name":"ZipDecoder","qualifiedName":"archive/archive.ZipDecoder","preview":"<p>Decode a zip formatted buffer into an <a>archive/archive.Archive</a> object.</p>"},{"name":"ZipDirectory","qualifiedName":"archive/archive.ZipDirectory"},{"name":"ZipEncoder","qualifiedName":"archive/archive.ZipEncoder","preview":"<p>Encode an <a>archive/archive.Archive</a> object into a Zip formatted buffer.</p>"},{"name":"ZipFile","qualifiedName":"archive/archive.ZipFile"},{"name":"ZipFileHeader","qualifiedName":"archive/archive.ZipFileHeader"}],"typedef":{},"error":[{"name":"ArchiveException","qualifiedName":"archive/archive.ArchiveException","preview":"<p>An exception thrown when there was a problem in the archive library.</p>"}]},"packageName":"archive","packageIntro":"<h1>archive</h1>\n<p><a href=\"https://drone.io/github.com/brendan-duncan/archive/latest\"><a href=\"https://drone.io/github.com/brendan-duncan/archive/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/brendan-duncan/archive/status.png\"></img></a></a></p>\n<h2>Overview</h2>\n<p>A Dart library to encode and decode various archive and compression formats.</p>\n<p>The library has no reliance on <code>dart:io</code>, so it can be used for both server and\nweb applications. </p>\n<p>The archive library currently supports the following decoders:</p><ul><li>Zip (Archive)</li><li>Tar (Archive) </li><li>ZLib Inflate decompression</li><li>GZip Inflate decompression</li><li>BZip2 decompression</li></ul>\n<p>And the following encoders:</p><ul><li>Zip (Archive)</li><li>Tar (Archive)</li><li>ZLib Deflate compression</li><li>GZip Deflate compression</li><li>BZip2 compression</li></ul>\n<h2>Sample</h2>\n<p>Extract the contents of a Zip file, and encode the contents as a BZip2 \ncompressed Tar file:</p>\n<pre><code>import 'dart:io' as Io;\nimport 'package:archive/archive.dart';\nvoid main() {\n  // Read the Zip file from disk.\n  List&lt;int&gt; bytes = new Io.File('test.zip').readAsBytesSync();\n  \n  // Decode the Zip file\n  Archive archive = new ZipDecoder().decodeBytes(bytes);\n  \n  // Extract the contents of the Zip archive to disk.\n  for (ArchiveFile file in archive) {\n    String filename = file.name;\n    List&lt;int&gt; data = file.content;\n    new Io.File('out/' + filename)\n          ..createSync(recursive: true)\n          ..writeAsBytesSync(data);\n  }\n  \n  // Encode the archive as a BZip2 compressed Tar file.\n  List&lt;int&gt; tar_data = new TarEncoder().encode(archive);\n  List&lt;int&gt; tar_bz2 = new BZip2Encoder().encode(tar_data);\n  \n  // Write the compressed tar file to disk.\n  Io.File fp = new Io.File(filename + '.tbz');\n  fp.writeAsBytesSync(tar_bz2);\n}\n</code></pre>"}