{"name":"BidiFormatter","qualifiedName":"intl/intl.BidiFormatter","comment":"<p>Bidi stands for Bi-directional text.\nAccording to <a href=\"http://en.wikipedia.org/wiki/Bi-directional_text\">Wikipedia</a>:\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to boustrophedon,\nwhich is changing text directionality in each row.</p>\n<p>Utility class for formatting display text in a potentially\nopposite-directionality context without garbling layout issues.\nMostly a very \"slimmed-down\" and dart-ified port of the Closure Birectional\nformatting libary. If there is a utility in the Closure library (or ICU, or\nelsewhere) that you would like this formatter to make available, please\ncontact the Dart team.</p>\n<p>Provides the following functionality:</p><ol><li>\n<p><em>BiDi Wrapping</em>\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a \"wrapper\" that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a 'span dir=rtl' tag) or - only in contexts where mark-up\ncan not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.</p></li><li>\n<p><em>Directionality estimation</em>\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.</p></li><li>\n<p><em>Escaping</em>\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS\nattacks and other nasty business. This of course is always true, but the\nescaping cannot be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.</p></li></ol>\n<p>Thus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"contextDirection":{"name":"contextDirection","qualifiedName":"intl/intl.BidiFormatter.contextDirection","comment":"<p>The direction of the surrounding text (the context).</p>","final":false,"static":false,"constant":false,"type":[{"outer":"intl/intl.TextDirection","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isRTL":{"name":"isRTL","qualifiedName":"intl/intl.BidiFormatter.isRTL","comment":"<p>Is true if the known context direction for this formatter is RTL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"LTR":{"name":"LTR","qualifiedName":"intl/intl.BidiFormatter.BidiFormatter-LTR","comment":"<p>Create a formatting object with a direction. If <a>intl/intl.BidiFormatter.BidiFormatter-LTR.alwaysSpan</a> is true we\nshould always use a <code>span</code> tag, even when the input directionality is\nneutral or matches the context, so that the DOM structure of the output\ndoes not depend on the combination of directionalities.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"alwaysSpan":{"name":"alwaysSpan","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"RTL":{"name":"RTL","qualifiedName":"intl/intl.BidiFormatter.BidiFormatter-RTL","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"alwaysSpan":{"name":"alwaysSpan","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"UNKNOWN":{"name":"UNKNOWN","qualifiedName":"intl/intl.BidiFormatter.BidiFormatter-UNKNOWN","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"alwaysSpan":{"name":"alwaysSpan","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"estimateDirection":{"name":"estimateDirection","qualifiedName":"intl/intl.BidiFormatter.estimateDirection","comment":"<p>Estimates the directionality of <a>intl/intl.BidiFormatter.estimateDirection.text</a> using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n<a>intl/intl.BidiFormatter.estimateDirection.isHtml</a> is true if <a>intl/intl.BidiFormatter.estimateDirection.text</a> HTML or HTML-escaped.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"intl/intl.TextDirection","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"isHtml":{"name":"isHtml","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"wrapWithSpan":{"name":"wrapWithSpan","qualifiedName":"intl/intl.BidiFormatter.wrapWithSpan","comment":"<p>Formats a string of a given (or estimated, if not provided)\n<a>intl/intl.BidiFormatter.wrapWithSpan.direction</a> for use in HTML output of the context directionality, so\nan opposite-directionality string is neither garbled nor garbles what\nfollows it.\nIf the input string's directionality doesn't match the context\ndirectionality, we wrap it with a <code>span</code> tag and add a <code>dir</code> attribute\n(either \"dir=rtl\" or \"dir=ltr\").\nIf alwaysSpan was true when constructing the formatter, the input is always\nwrapped with <code>span</code> tag, skipping the dir attribute when it's not needed.</p>\n<p>If <a>intl/intl.BidiFormatter.wrapWithSpan.resetDir</a> is true and the overall directionality or the exit\ndirectionality of <a>intl/intl.BidiFormatter.wrapWithSpan.text</a> is opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM). If <a>intl/intl.BidiFormatter.wrapWithSpan.isHtml</a> is false, we HTML-escape the <a>intl/intl.BidiFormatter.wrapWithSpan.text</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"isHtml":{"name":"isHtml","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"resetDir":{"name":"resetDir","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"direction":{"name":"direction","optional":true,"named":true,"default":false,"type":[{"outer":"intl/intl.TextDirection","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"wrapWithUnicode":{"name":"wrapWithUnicode","qualifiedName":"intl/intl.BidiFormatter.wrapWithUnicode","comment":"<p>Format <a>intl/intl.BidiFormatter.wrapWithUnicode.text</a> of a known (if specified) or estimated <a>intl/intl.BidiFormatter.wrapWithUnicode.direction</a> for use\nin <em>plain-text</em> output of the context directionality, so an\nopposite-directionality text is neither garbled nor garbles what follows\nit. Unlike wrapWithSpan, this makes use of unicode BiDi formatting\ncharacters instead of spans for wrapping. The returned string would be\nRLE+text+PDF for RTL text, or LRE+text+PDF for LTR text.</p>\n<p>If <a>intl/intl.BidiFormatter.wrapWithUnicode.resetDir</a> is true, and if the overall directionality or the exit\ndirectionality of text are opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM).</p>\n<p>In HTML, the <em>only</em> valid use of this function is inside of elements that\ndo not allow markup, e.g. an 'option' tag.\nThis function does <em>not</em> do HTML-escaping regardless of the value of\n<a>intl/intl.BidiFormatter.wrapWithUnicode.isHtml</a>. <a>intl/intl.BidiFormatter.wrapWithUnicode.isHtml</a> is used to designate if the text contains HTML (escaped\nor unescaped).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"isHtml":{"name":"isHtml","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"resetDir":{"name":"resetDir","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"direction":{"name":"direction","optional":true,"named":true,"default":false,"type":[{"outer":"intl/intl.TextDirection","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"intl/intl.BidiFormatter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>intl/intl.BidiFormatter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"intl/intl.BidiFormatter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"intl/intl.BidiFormatter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>intl/intl.BidiFormatter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>intl/intl.BidiFormatter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"intl/intl.BidiFormatter.noSuchMethod","comment":"<p><a>intl/intl.BidiFormatter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>intl/intl.BidiFormatter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>intl/intl.BidiFormatter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>intl/intl.BidiFormatter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"intl/intl.BidiFormatter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}