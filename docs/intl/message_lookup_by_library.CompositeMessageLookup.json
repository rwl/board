{"name":"CompositeMessageLookup","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup","comment":"<p>This is a message lookup mechanism that delegates to one of a collection\nof individual <a>intl/message_lookup_by_library.MessageLookupByLibrary</a> instances.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"availableMessages":{"name":"availableMessages","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.availableMessages","comment":"<p>A map from locale names to the corresponding lookups.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"intl/message_lookup_by_library.MessageLookupByLibrary","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"addLocale":{"name":"addLocale","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.addLocale","comment":"<p>If we do not already have a locale for <a>intl/message_lookup_by_library.CompositeMessageLookup.addLocale.localeName</a> then\n<a>intl/message_lookup_by_library.CompositeMessageLookup.addLocale.findLocale</a> will be called and the result stored as the lookup\nmechanism for that locale.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"localeName":{"name":"localeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"findLocale":{"name":"findLocale","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"localeExists":{"name":"localeExists","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.localeExists","comment":"<p>Return true if we have a message lookup for <a>intl/message_lookup_by_library.CompositeMessageLookup.localeExists.localeName</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"localeName":{"name":"localeName","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lookupMessage":{"name":"lookupMessage","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage","comment":"<p>Look up the message with the given <a>intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage.name</a> and <a>intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage.locale</a> and return\nthe translated version with the values in <a>intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage.args</a> interpolated.\nIf nothing is found, return <a>intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage.message_str</a>. The <a>intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage.desc</a> and <a>intl/message_lookup_by_library.CompositeMessageLookup.lookupMessage.examples</a>\nparameters are ignored</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"message_str":{"name":"message_str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"examples":{"name":"examples","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"{}","annotations":[]},"locale":{"name":"locale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"meaning":{"name":"meaning","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>intl/message_lookup_by_library.CompositeMessageLookup.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>intl/message_lookup_by_library.CompositeMessageLookup.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>intl/message_lookup_by_library.CompositeMessageLookup.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.noSuchMethod","comment":"<p><a>intl/message_lookup_by_library.CompositeMessageLookup.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>intl/message_lookup_by_library.CompositeMessageLookup.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>intl/message_lookup_by_library.CompositeMessageLookup.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>intl/message_lookup_by_library.CompositeMessageLookup.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"intl/message_lookup_by_library.CompositeMessageLookup.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}