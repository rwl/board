{"name":"NumberFormat","qualifiedName":"intl/intl.NumberFormat","comment":"<p>Provides the ability to format a number in a locale-specific way. The\nformat is specified as a pattern using a subset of the ICU formatting\npatterns.</p><ul><li><code>0</code> A single digit</li><li><code>#</code> A single digit, omitted if the value is zero</li><li><code>.</code> Decimal separator</li><li><code>-</code> Minus sign</li><li><code>,</code> Grouping separator</li><li><code>E</code> Separates mantissa and expontent</li><li><code>+</code> - Before an exponent, indicates it should be prefixed with a plus sign.</li><li><code>%</code> - In prefix or suffix, multiply by 100 and show as percentage</li><li><code>‰ (\\u2030)</code> In prefix or suffix, multiply by 1000 and show as per mille</li><li><code>¤ (\\u00A4)</code> Currency sign, replaced by currency name</li><li><code>'</code> Used to quote special characters</li><li><code>;</code> Used to separate the positive and negative patterns if both are present</li></ul>\n<p>For example,</p>\n<pre><code>  var f = new NumberFormat(\"###.0#\", \"en_US\");\n  print(f.format(12.345));\n  ==&gt; 12.34\n</code></pre>\n<p>If the locale is not specified, it will default to the current locale. If\nthe format is not specified it will print in a basic format with at least\none integer digit and three fraction digits.</p>\n<p>There are also standard patterns available via the special constructors. e.g.</p>\n<pre><code>  var symbols = new NumberFormat.percentFormat(\"ar\");\n</code></pre>\n<p>There are four such constructors: decimalFormat, percentFormat,\nscientificFormat and currencyFormat. However, at the moment,\nscientificFormat prints only as equivalent to \"#E0\" and does not take\ninto account significant digits. currencyFormat will always use the name\nof the currency rather than the symbol.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"currencyName":{"name":"currencyName","qualifiedName":"intl/intl.NumberFormat.currencyName","comment":"<p>The name (or symbol) of the currency to print.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"maximumFractionDigits":{"name":"maximumFractionDigits","qualifiedName":"intl/intl.NumberFormat.maximumFractionDigits","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"maximumIntegerDigits":{"name":"maximumIntegerDigits","qualifiedName":"intl/intl.NumberFormat.maximumIntegerDigits","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"minimumExponentDigits":{"name":"minimumExponentDigits","qualifiedName":"intl/intl.NumberFormat.minimumExponentDigits","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"minimumFractionDigits":{"name":"minimumFractionDigits","qualifiedName":"intl/intl.NumberFormat.minimumFractionDigits","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"minimumIntegerDigits":{"name":"minimumIntegerDigits","qualifiedName":"intl/intl.NumberFormat.minimumIntegerDigits","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"locale":{"name":"locale","qualifiedName":"intl/intl.NumberFormat.locale","comment":"<p>Return the locale code in which we operate, e.g. 'en_US' or 'pt'.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"symbols":{"name":"symbols","qualifiedName":"intl/intl.NumberFormat.symbols","comment":"<p>Return the symbols which are used in our locale. Cache them to avoid\nrepeated lookup.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"intl/number_symbols.NumberSymbols","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"intl/intl.NumberFormat.NumberFormat-","comment":"<p>Create a number format that prints using <a>intl/intl.NumberFormat.NumberFormat-.newPattern</a> as it applies in\n<a>intl/intl.NumberFormat.NumberFormat-.locale</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"intl/intl.NumberFormat","inner":[]}],"parameters":{"newPattern":{"name":"newPattern","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"locale":{"name":"locale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"currencyPattern":{"name":"currencyPattern","qualifiedName":"intl/intl.NumberFormat.NumberFormat-currencyPattern","comment":"<p>Create a number format that prints as CURRENCY_PATTERN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"locale":{"name":"locale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"currency":{"name":"currency","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decimalPattern":{"name":"decimalPattern","qualifiedName":"intl/intl.NumberFormat.NumberFormat-decimalPattern","comment":"<p>Create a number format that prints as DECIMAL_PATTERN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"locale":{"name":"locale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"percentPattern":{"name":"percentPattern","qualifiedName":"intl/intl.NumberFormat.NumberFormat-percentPattern","comment":"<p>Create a number format that prints as PERCENT_PATTERN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"locale":{"name":"locale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scientificPattern":{"name":"scientificPattern","qualifiedName":"intl/intl.NumberFormat.NumberFormat-scientificPattern","comment":"<p>Create a number format that prints as SCIENTIFIC_PATTERN.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"locale":{"name":"locale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"format":{"name":"format","qualifiedName":"intl/intl.NumberFormat.format","comment":"<p>Format <a>intl/intl.NumberFormat.format.number</a> according to our pattern and return the formatted string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"number":{"name":"number","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"localeExists":{"name":"localeExists","qualifiedName":"intl/intl.NumberFormat.localeExists","comment":"<p>Return true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"localeName":{"name":"localeName","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"intl/intl.NumberFormat.parse","comment":"<p>Parse the number represented by the string. If it's not\nparseable, throws a <a>dart-core.FormatException</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"intl/intl.NumberFormat.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"intl/intl.NumberFormat.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>intl/intl.NumberFormat.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"intl/intl.NumberFormat.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"intl/intl.NumberFormat.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>intl/intl.NumberFormat.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>intl/intl.NumberFormat.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"intl/intl.NumberFormat.noSuchMethod","comment":"<p><a>intl/intl.NumberFormat.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>intl/intl.NumberFormat.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>intl/intl.NumberFormat.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>intl/intl.NumberFormat.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"intl/intl.NumberFormat.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}