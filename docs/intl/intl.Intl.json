{"name":"Intl","qualifiedName":"intl/intl.Intl","comment":"<p>The Intl class provides a common entry point for internationalization\nrelated tasks. An Intl instance can be created for a particular locale\nand used to create a date format via <code>anIntl.date()</code>. Static methods\non this class are also used in message formatting.</p>\n<p>Message example:</p>\n<pre><code>'''I see ${Intl.plural(num_people,\n          {'0': 'no one at all',\n           '1': 'one other person',\n           'other': '$num_people other people'})} in $place.''''\n</code></pre>\n<p>Usage examples:</p>\n<pre><code> today(date) =&gt; Intl.message(\n     \"Today's date is $date\",\n     name: 'today',\n     args: [date],\n     desc: 'Indicate the current date',\n     examples: {'date' : 'June 8, 2012'});\n print(today(new DateTime.now().toString());\n\n msg(num_people, place) =&gt; Intl.message(\n      '''I see ${Intl.plural(num_people,\n        {'0': 'no one at all',\n         '1': 'one other person',\n         'other': '$num_people other people'})} in $place.''',\n     name: 'msg',\n     args: [num_people, place],\n     desc: 'Description of how many people are seen as program start.',\n     examples: {'num_people': 3, 'place': 'London'});\n</code></pre>\n<p>Calling <code>msg(2, 'Athens');</code> would\nproduce \"I see 2 other people in Athens.\" as output in the default locale.</p>\n<p>You can set the default locale.</p>\n<pre><code>  Intl.defaultLocale = \"pt_BR\";\n</code></pre>\n<p>To temporarily use a locale other than the default, use the <code>withLocale</code>\nfunction.</p>\n<pre><code>  var todayString = new DateFormat(\"pt_BR\").format(new DateTime.now());\n  print(withLocale(\"pt_BR\", () =&gt; today(todayString));\n</code></pre>\n<p>See <code>tests/message_format_test.dart</code> for more examples.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"defaultLocale":{"name":"defaultLocale","qualifiedName":"intl/intl.Intl.defaultLocale","comment":"<p>The default locale. This defaults to being set from systemLocale, but\ncan also be set explicitly, and will then apply to any new instances where\nthe locale isn't specified.</p>","final":false,"static":true,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"systemLocale":{"name":"systemLocale","qualifiedName":"intl/intl.Intl.systemLocale","comment":"<p>The system's locale, as obtained from the window.navigator.language\nor other operating system mechanism. Note that due to system limitations\nthis is not automatically set, and must be set by importing one of\nintl<em>browser.dart or intl</em>standalone.dart and calling findSystemLocale().</p>","final":false,"static":true,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"locale":{"name":"locale","qualifiedName":"intl/intl.Intl.locale","comment":"<p>Return the locale for this instance. If none was set, the locale will\nbe the default.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"intl/intl.Intl.Intl-","comment":"<p>Constructor optionally <a>intl/intl.Intl.Intl-.aLocale</a> for specifics of the language\nlocale to be used, otherwise, we will attempt to infer it (acceptable if\nDart is running on the client, we can infer from the browser/client\npreferences).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"aLocale":{"name":"aLocale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"canonicalizedLocale":{"name":"canonicalizedLocale","qualifiedName":"intl/intl.Intl.canonicalizedLocale","comment":"<p>Return the name <a>intl/intl.Intl.canonicalizedLocale.aLocale</a> turned into xx_YY where it might possibly be\nin the wrong case or with a hyphen instead of an underscore. If\n<a>intl/intl.Intl.canonicalizedLocale.aLocale</a> is null, for example, if you tried to get it from IE,\nreturn the current system locale.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"aLocale":{"name":"aLocale","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"date":{"name":"date","qualifiedName":"intl/intl.Intl.date","comment":"<p>Return a new date format using the specified <a>intl/intl.Intl.date.pattern</a>.\nIf <a>intl/intl.Intl.date.desiredLocale</a> is not specified, then we default to <a>intl/intl.Intl.locale</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"intl/intl.DateFormat","inner":[]}],"parameters":{"pattern":{"name":"pattern","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"desiredLocale":{"name":"desiredLocale","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"gender":{"name":"gender","qualifiedName":"intl/intl.Intl.gender","comment":"<p>Format a message differently depending on <a>intl/intl.Intl.gender.targetGender</a>. Normally used as\npart of an Intl.message message that is to be translated.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"targetGender":{"name":"targetGender","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"male":{"name":"male","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"female":{"name":"female","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"other":{"name":"other","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"examples":{"name":"examples","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"locale":{"name":"locale","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"meaning":{"name":"meaning","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getCurrentLocale":{"name":"getCurrentLocale","qualifiedName":"intl/intl.Intl.getCurrentLocale","comment":"<p>Accessor for the current locale. This should always == the default locale,\nunless for some reason this gets called inside a message that resets the\nlocale.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"message":{"name":"message","qualifiedName":"intl/intl.Intl.message","comment":"<p>Use this for a message that will be translated for different locales. The\nexpected usage is that this is inside an enclosing function that only\nreturns the value of this call and provides a scope for the variables that\nwill be substituted in the message.</p>\n<p>The parameters are a\n<a>intl/intl.Intl.message.message_str</a> to be translated, which may be interpolated\nbased on one or more variables, the <a>intl/intl.Intl.message.name</a> of the message, which should\nmatch the enclosing function name, the <a>intl/intl.Intl.message.args</a> of the enclosing\nfunction, a <a>intl/intl.Intl.message.desc</a> providing a description of usage\nand a map of <a>intl/intl.Intl.message.examples</a> for each interpolated variable. For example</p>\n<pre><code>  hello(yourName) =&gt; Intl.message(\n    \"Hello, $yourName\",\n    name: \"hello\",\n    args: [name],\n    desc: \"Say hello\",\n    examples = {\"yourName\": \"Sparky\"}.\n</code></pre>\n<p>The source code will be processed via the analyzer to extract out the\nmessage data, so only a subset of valid Dart code is accepted. In\nparticular, everything must be literal and cannot refer to variables\noutside the scope of the enclosing function. The <a>intl/intl.Intl.message.examples</a> map must\nbe a valid const literal map. Similarly, the <a>intl/intl.Intl.message.desc</a> argument must\nbe a single, simple string. These two arguments will not be used at runtime\nbut will be extracted from\nthe source code and used as additional data for translators.</p>\n<p>The <a>intl/intl.Intl.message.name</a> and <a>intl/intl.Intl.message.args</a> arguments are required, and are used at runtime\nto look up the localized version and pass the appropriate arguments to it.\nWe may in the future modify the code during compilation to make manually\npassing those arguments unnecessary.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"message_str":{"name":"message_str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"examples":{"name":"examples","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":"{}","annotations":[]},"locale":{"name":"locale","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"meaning":{"name":"meaning","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"plural":{"name":"plural","qualifiedName":"intl/intl.Intl.plural","comment":"<p>Format a message differently depending on <a>intl/intl.Intl.plural.howMany</a>. Normally used\nas part of an <code>Intl.message</code> text that is to be translated.\nSelects the correct plural form from\nthe provided alternatives. The <a>intl/intl.Intl.plural.other</a> named argument is mandatory.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"howMany":{"name":"howMany","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"zero":{"name":"zero","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"one":{"name":"one","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"two":{"name":"two","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"few":{"name":"few","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"many":{"name":"many","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"other":{"name":"other","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"examples":{"name":"examples","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"locale":{"name":"locale","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"meaning":{"name":"meaning","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"select":{"name":"select","qualifiedName":"intl/intl.Intl.select","comment":"<p>Format a message differently depending on <a>intl/intl.Intl.select.choice</a>. We look up the value\nof <a>intl/intl.Intl.select.choice</a> in <a>intl/intl.Intl.select.cases</a> and return the result, or an empty string if\nit is not found. Normally used as part\nof an Intl.message message that is to be translated.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"choice":{"name":"choice","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"cases":{"name":"cases","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"desc":{"name":"desc","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"examples":{"name":"examples","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"locale":{"name":"locale","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"meaning":{"name":"meaning","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"shortLocale":{"name":"shortLocale","qualifiedName":"intl/intl.Intl.shortLocale","comment":"<p>Return the short version of a locale name, e.g. 'en_US' => 'en'</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"aLocale":{"name":"aLocale","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"intl/intl.Intl.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"verifiedLocale":{"name":"verifiedLocale","qualifiedName":"intl/intl.Intl.verifiedLocale","comment":"<p>Given <a>intl/intl.Intl.verifiedLocale.newLocale</a> return a locale that we have data for that is similar\nto it, if possible.\nIf <a>intl/intl.Intl.verifiedLocale.newLocale</a> is found directly, return it. If it can't be found, look up\nbased on just the language (e.g. 'en<em>CA' -> 'en'). Also accepts '-'\nas a separator and changes it into '</em>' for lookup, and changes the\ncountry to uppercase.\nNote that null is interpreted as meaning the default locale, so if\n<a>intl/intl.Intl.verifiedLocale.newLocale</a> is null it will be returned.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"newLocale":{"name":"newLocale","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"localeExists":{"name":"localeExists","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]},"onFailure":{"name":"onFailure","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"function(Intl#_throwLocaleError)","annotations":[]}},"annotations":[]},"withLocale":{"name":"withLocale","qualifiedName":"intl/intl.Intl.withLocale","comment":"<p>Format the given function with a specific <a>intl/intl.Intl.withLocale.locale</a>, given a\n<a>intl/intl.Intl.withLocale.message_function</a> that takes no parameters. The <a>intl/intl.Intl.withLocale.message_function</a> can be\na simple message function that just returns the result of <code>Intl.message()</code>\nit can be a wrapper around a message function that takes arguments, or it\ncan be something more complex that manipulates multiple message\nfunctions.</p>\n<p>In either case, the purpose of this is to delay calling <a>intl/intl.Intl.withLocale.message_function</a>\nuntil the proper locale has been set. This returns the result of calling\n<a>intl/intl.Intl.withLocale.message_function</a>, which could be of an arbitrary type.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"locale":{"name":"locale","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"message_function":{"name":"message_function","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"intl/intl.Intl.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>intl/intl.Intl.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"intl/intl.Intl.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"intl/intl.Intl.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>intl/intl.Intl.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>intl/intl.Intl.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"intl/intl.Intl.noSuchMethod","comment":"<p><a>intl/intl.Intl.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>intl/intl.Intl.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>intl/intl.Intl.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>intl/intl.Intl.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"intl/intl.Intl.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}