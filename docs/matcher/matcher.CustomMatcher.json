{"name":"CustomMatcher","qualifiedName":"matcher/matcher.CustomMatcher","comment":"<p>A useful utility class for implementing other matchers through inheritance.\nDerived classes should call the base constructor with a feature name and\ndescription, and an instance matcher, and should implement the\n<a>matcher/matcher.CustomMatcher.featureValueOf</a> abstract method.</p>\n<p>The feature description will typically describe the item and the feature,\nwhile the feature name will just name the feature. For example, we may\nhave a Widget class where each Widget has a price; we could make a\n<a>matcher/matcher.CustomMatcher</a> that can make assertions about prices with:</p>\n<pre><code>class HasPrice extends CustomMatcher {\n  const HasPrice(matcher) :\n      super(\"Widget with price that is\", \"price\", matcher);\n  featureValueOf(actual) =&gt; actual.price;\n}\n</code></pre>\n<p>and then use this for example like:</p>\n<pre><code> expect(inventoryItem, new HasPrice(greaterThan(0)));\n</code></pre>","isAbstract":false,"superclass":"matcher/matcher.Matcher","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"matcher/matcher.CustomMatcher.CustomMatcher-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_featureDescription":{"name":"_featureDescription","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"_featureName":{"name":"_featureName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"matcher":{"name":"matcher","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"describe":{"name":"describe","qualifiedName":"matcher/matcher.CustomMatcher.describe","comment":"<p>This builds a textual description of the matcher.</p>","commentFrom":"matcher-mirror_matchers.Matcher.describe","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"matcher/matcher.Description","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"matcher/matcher.Description","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"describeMismatch":{"name":"describeMismatch","qualifiedName":"matcher/matcher.CustomMatcher.describeMismatch","comment":"<p>This builds a textual description of a specific mismatch. <a>matcher/matcher.CustomMatcher.describeMismatch.item</a>\nis the value that was tested by <a>matcher/matcher.CustomMatcher.matches</a>; <a>matcher/matcher.CustomMatcher.describeMismatch.matchState</a> is\nthe <a>dart-core.Map</a> that was passed to and supplemented by <a>matcher/matcher.CustomMatcher.matches</a>\nwith additional information about the mismact, and <a>matcher/matcher.CustomMatcher.describeMismatch.mismatchDescription</a>\nis the <a>matcher/matcher.Description</a> that is being built to decribe the mismatch.\nA few matchers make use of the <a>matcher/matcher.CustomMatcher.describeMismatch.verbose</a> flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.</p>","commentFrom":"matcher-mirror_matchers.Matcher.describeMismatch","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"matcher/matcher.Description","inner":[]}],"parameters":{"item":{"name":"item","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"mismatchDescription":{"name":"mismatchDescription","optional":false,"named":false,"default":false,"type":[{"outer":"matcher/matcher.Description","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"verbose":{"name":"verbose","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"featureValueOf":{"name":"featureValueOf","qualifiedName":"matcher/matcher.CustomMatcher.featureValueOf","comment":"<p>Override this to extract the interesting feature.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"actual":{"name":"actual","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"matcher/matcher.CustomMatcher.matches","comment":"<p>This does the matching of the actual vs expected values.\n<a>matcher/matcher.CustomMatcher.matches.item</a> is the actual value. <a>matcher/matcher.CustomMatcher.matches.matchState</a> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a>matcher/matcher.CustomMatcher.describeMismatch</a>.</p>","commentFrom":"matcher-mirror_matchers.Matcher.matches","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"item":{"name":"item","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"matcher/matcher.CustomMatcher.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>matcher/matcher.CustomMatcher.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"matcher/matcher.CustomMatcher.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"matcher/matcher.CustomMatcher.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>matcher/matcher.CustomMatcher.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>matcher/matcher.CustomMatcher.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"describe":{"name":"describe","qualifiedName":"matcher/matcher.CustomMatcher.describe","comment":"<p>This builds a textual description of the matcher.</p>","commentFrom":"","inheritedFrom":"matcher.Matcher.describe","static":false,"abstract":true,"constant":false,"return":[{"outer":"matcher/matcher.Description","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"matcher/matcher.Description","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"describeMismatch":{"name":"describeMismatch","qualifiedName":"matcher/matcher.CustomMatcher.describeMismatch","comment":"<p>This builds a textual description of a specific mismatch. <a>matcher/matcher.CustomMatcher.describeMismatch.item</a>\nis the value that was tested by <a>matcher/matcher.CustomMatcher.matches</a>; <a>matcher/matcher.CustomMatcher.describeMismatch.matchState</a> is\nthe <a>dart-core.Map</a> that was passed to and supplemented by <a>matcher/matcher.CustomMatcher.matches</a>\nwith additional information about the mismact, and <a>matcher/matcher.CustomMatcher.describeMismatch.mismatchDescription</a>\nis the <a>matcher/matcher.Description</a> that is being built to decribe the mismatch.\nA few matchers make use of the <a>matcher/matcher.CustomMatcher.describeMismatch.verbose</a> flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.</p>","commentFrom":"","inheritedFrom":"matcher.Matcher.describeMismatch","static":false,"abstract":false,"constant":false,"return":[{"outer":"matcher/matcher.Description","inner":[]}],"parameters":{"item":{"name":"item","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"mismatchDescription":{"name":"mismatchDescription","optional":false,"named":false,"default":false,"type":[{"outer":"matcher/matcher.Description","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"verbose":{"name":"verbose","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"matcher/matcher.CustomMatcher.matches","comment":"<p>This does the matching of the actual vs expected values.\n<a>matcher/matcher.CustomMatcher.matches.item</a> is the actual value. <a>matcher/matcher.CustomMatcher.matches.matchState</a> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a>matcher/matcher.CustomMatcher.describeMismatch</a>.</p>","commentFrom":"","inheritedFrom":"matcher.Matcher.matches","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"item":{"name":"item","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"matchState":{"name":"matchState","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"matcher/matcher.CustomMatcher.noSuchMethod","comment":"<p><a>matcher/matcher.CustomMatcher.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>matcher/matcher.CustomMatcher.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>matcher/matcher.CustomMatcher.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>matcher/matcher.CustomMatcher.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"matcher/matcher.CustomMatcher.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}